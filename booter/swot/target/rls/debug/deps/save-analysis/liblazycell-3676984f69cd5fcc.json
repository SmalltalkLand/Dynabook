{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1","program":"/home/grahamk/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","lazycell","/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts","--crate-type","lib","--emit=dep-info,metadata,link","-Cembed-bitcode=no","-C","debuginfo=2","-C","metadata=3676984f69cd5fcc","-C","extra-filename=-3676984f69cd5fcc","--out-dir","/home/grahamk/dynabook/booter/swot/target/rls/debug/deps","-L","dependency=/home/grahamk/dynabook/booter/swot/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/grahamk/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/grahamk/dynabook/booter/swot/target/rls/debug/deps/liblazycell-3676984f69cd5fcc.rmeta"},"prelude":{"crate_id":{"name":"lazycell","disambiguator":[10583519559460244857,12750148788325512708]},"crate_root":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src","external_crates":[{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[7820758769895212465,18238673129907254737]}},{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[9963577696039191896,9299225972135698896]}},{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[5115750228290021017,18426691258663503339]}}],"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":527,"byte_end":19747,"line_start":11,"line_end":649,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":527,"byte_end":19747,"line_start":11,"line_end":649,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":58},{"krate":0,"index":64},{"krate":0,"index":61},{"krate":0,"index":10},{"krate":0,"index":29},{"krate":0,"index":32},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":67},{"krate":0,"index":74},{"krate":0,"index":71},{"krate":0,"index":38},{"krate":0,"index":47},{"krate":0,"index":50},{"krate":0,"index":54},{"krate":0,"index":56}],"decl_id":null,"docs":" This crate provides a `LazyCell` struct which acts as a lazily filled\n `Cell`.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":550,"byte_end":556,"line_start":11,"line_end":11,"column_start":24,"column_end":30}},{"value":"deny(missing_docs)","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":560,"byte_end":582,"line_start":13,"line_end":13,"column_start":1,"column_end":23}},{"value":"! This crate provides a `LazyCell` struct which acts as a lazily filled","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":684,"byte_end":757,"line_start":17,"line_end":17,"column_start":1,"column_end":74}},{"value":"! `Cell`.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":758,"byte_end":769,"line_start":18,"line_end":18,"column_start":1,"column_end":12}},{"value":"!","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":770,"byte_end":773,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"! With a `RefCell`, the inner contents cannot be borrowed for the lifetime of","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":774,"byte_end":853,"line_start":20,"line_end":20,"column_start":1,"column_end":80}},{"value":"! the entire object, but only of the borrows returned. A `LazyCell` is a","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":854,"byte_end":928,"line_start":21,"line_end":21,"column_start":1,"column_end":75}},{"value":"! variation on `RefCell` which allows borrows to be tied to the lifetime of","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":929,"byte_end":1006,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"! the outer object.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":1007,"byte_end":1028,"line_start":23,"line_end":23,"column_start":1,"column_end":22}},{"value":"!","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":1029,"byte_end":1032,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"! # Example","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":1033,"byte_end":1046,"line_start":25,"line_end":25,"column_start":1,"column_end":14}},{"value":"!","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":1047,"byte_end":1050,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"! The following example shows a quick example of the basic functionality of","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":1051,"byte_end":1128,"line_start":27,"line_end":27,"column_start":1,"column_end":78}},{"value":"! `LazyCell`.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":1129,"byte_end":1144,"line_start":28,"line_end":28,"column_start":1,"column_end":16}},{"value":"!","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":1145,"byte_end":1148,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":1149,"byte_end":1156,"line_start":30,"line_end":30,"column_start":1,"column_end":8}},{"value":"! use lazycell::LazyCell;","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":1157,"byte_end":1184,"line_start":31,"line_end":31,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":1185,"byte_end":1188,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"! let lazycell = LazyCell::new();","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":1189,"byte_end":1224,"line_start":33,"line_end":33,"column_start":1,"column_end":36}},{"value":"!","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":1225,"byte_end":1228,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"! assert_eq!(lazycell.borrow(), None);","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":1229,"byte_end":1269,"line_start":35,"line_end":35,"column_start":1,"column_end":41}},{"value":"! assert!(!lazycell.filled());","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":1270,"byte_end":1302,"line_start":36,"line_end":36,"column_start":1,"column_end":33}},{"value":"! lazycell.fill(1).ok();","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":1303,"byte_end":1329,"line_start":37,"line_end":37,"column_start":1,"column_end":27}},{"value":"! assert!(lazycell.filled());","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":1330,"byte_end":1361,"line_start":38,"line_end":38,"column_start":1,"column_end":32}},{"value":"! assert_eq!(lazycell.borrow(), Some(&1));","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":1362,"byte_end":1406,"line_start":39,"line_end":39,"column_start":1,"column_end":45}},{"value":"! assert_eq!(lazycell.into_inner(), Some(1));","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":1407,"byte_end":1454,"line_start":40,"line_end":40,"column_start":1,"column_end":48}},{"value":"! ```","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":1455,"byte_end":1462,"line_start":41,"line_end":41,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":1463,"byte_end":1466,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"! `AtomicLazyCell` is a variant that uses an atomic variable to manage","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":1467,"byte_end":1539,"line_start":43,"line_end":43,"column_start":1,"column_end":73}},{"value":"! coordination in a thread-safe fashion. The limitation of an `AtomicLazyCell`","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":1540,"byte_end":1620,"line_start":44,"line_end":44,"column_start":1,"column_end":81}},{"value":"! is that after it is initialized, it can't be modified.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":1621,"byte_end":1679,"line_start":45,"line_end":45,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":58},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":2095,"byte_end":2103,"line_start":62,"line_end":62,"column_start":12,"column_end":20},"name":"LazyCell","qualname":"::LazyCell","value":"LazyCell {  }","parent":null,"children":[{"krate":0,"index":60}],"decl_id":null,"docs":" A lazily filled `Cell`, with mutable contents.","sig":null,"attributes":[{"value":"/ A lazily filled `Cell`, with mutable contents.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":1830,"byte_end":1880,"line_start":56,"line_end":56,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":1881,"byte_end":1884,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ A `LazyCell` is completely frozen once filled, **unless** you have `&mut`","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":1885,"byte_end":1962,"line_start":58,"line_end":58,"column_start":1,"column_end":78}},{"value":"/ access to it, in which case `LazyCell::borrow_mut` may be used to mutate the","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":1963,"byte_end":2043,"line_start":59,"line_end":59,"column_start":1,"column_end":81}},{"value":"/ contents.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":2044,"byte_end":2057,"line_start":60,"line_end":60,"column_start":1,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":12},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":2221,"byte_end":2224,"line_start":68,"line_end":68,"column_start":12,"column_end":15},"name":"new","qualname":"<LazyCell<T>>::new","value":"fn () -> LazyCell<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new, empty, `LazyCell`.\n","sig":null,"attributes":[{"value":"/ Creates a new, empty, `LazyCell`.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":2172,"byte_end":2209,"line_start":67,"line_end":67,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":13},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":2432,"byte_end":2436,"line_start":75,"line_end":75,"column_start":12,"column_end":16},"name":"fill","qualname":"<LazyCell<T>>::fill","value":"fn (&self, value: T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Put a value into this cell.","sig":null,"attributes":[{"value":"/ Put a value into this cell.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":2305,"byte_end":2336,"line_start":72,"line_end":72,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":2341,"byte_end":2344,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ This function will return `Err(value)` is the cell is already full.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":2349,"byte_end":2420,"line_start":74,"line_end":74,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":14},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":3106,"byte_end":3113,"line_start":95,"line_end":95,"column_start":12,"column_end":19},"name":"replace","qualname":"<LazyCell<T>>::replace","value":"fn (&mut self, value: T) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Put a value into this cell.","sig":null,"attributes":[{"value":"/ Put a value into this cell.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":2652,"byte_end":2683,"line_start":85,"line_end":85,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":2688,"byte_end":2691,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ Note that this function is infallible but requires `&mut self`. By","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":2696,"byte_end":2766,"line_start":87,"line_end":87,"column_start":5,"column_end":75}},{"value":"/ requiring `&mut self` we're guaranteed that no active borrows to this","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":2771,"byte_end":2844,"line_start":88,"line_end":88,"column_start":5,"column_end":78}},{"value":"/ cell can exist so we can always fill in the value. This may not always","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":2849,"byte_end":2923,"line_start":89,"line_end":89,"column_start":5,"column_end":79}},{"value":"/ be usable, however, as `&mut self` may not be possible to borrow.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":2928,"byte_end":2997,"line_start":90,"line_end":90,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":3002,"byte_end":3005,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ # Return value","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":3010,"byte_end":3028,"line_start":92,"line_end":92,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":3033,"byte_end":3036,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ This function returns the previous value, if any.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":3041,"byte_end":3094,"line_start":94,"line_end":94,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":15},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":3296,"byte_end":3302,"line_start":100,"line_end":100,"column_start":12,"column_end":18},"name":"filled","qualname":"<LazyCell<T>>::filled","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether this cell has been previously filled.\n","sig":null,"attributes":[{"value":"/ Test whether this cell has been previously filled.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":3230,"byte_end":3284,"line_start":99,"line_end":99,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":16},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":3611,"byte_end":3617,"line_start":109,"line_end":109,"column_start":12,"column_end":18},"name":"borrow","qualname":"<LazyCell<T>>::borrow","value":"fn (&self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Borrows the contents of this lazy cell for the duration of the cell\n itself.","sig":null,"attributes":[{"value":"/ Borrows the contents of this lazy cell for the duration of the cell","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":3363,"byte_end":3434,"line_start":104,"line_end":104,"column_start":5,"column_end":76}},{"value":"/ itself.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":3439,"byte_end":3450,"line_start":105,"line_end":105,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":3455,"byte_end":3458,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ This function will return `Some` if the cell has been previously","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":3463,"byte_end":3531,"line_start":107,"line_end":107,"column_start":5,"column_end":73}},{"value":"/ initialized, and `None` if it has not yet been initialized.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":3536,"byte_end":3599,"line_start":108,"line_end":108,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":17},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":3955,"byte_end":3965,"line_start":118,"line_end":118,"column_start":12,"column_end":22},"name":"borrow_mut","qualname":"<LazyCell<T>>::borrow_mut","value":"fn (&mut self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Borrows the contents of this lazy cell mutably for the duration of the cell\n itself.","sig":null,"attributes":[{"value":"/ Borrows the contents of this lazy cell mutably for the duration of the cell","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":3699,"byte_end":3778,"line_start":113,"line_end":113,"column_start":5,"column_end":84}},{"value":"/ itself.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":3783,"byte_end":3794,"line_start":114,"line_end":114,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":3799,"byte_end":3802,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ This function will return `Some` if the cell has been previously","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":3807,"byte_end":3875,"line_start":116,"line_end":116,"column_start":5,"column_end":73}},{"value":"/ initialized, and `None` if it has not yet been initialized.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":3880,"byte_end":3943,"line_start":117,"line_end":117,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":4373,"byte_end":4384,"line_start":131,"line_end":131,"column_start":12,"column_end":23},"name":"borrow_with","qualname":"<LazyCell<T>>::borrow_with","value":"fn <F> (&self, f: F) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Borrows the contents of this lazy cell for the duration of the cell\n itself.","sig":null,"attributes":[{"value":"/ Borrows the contents of this lazy cell for the duration of the cell","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":4059,"byte_end":4130,"line_start":122,"line_end":122,"column_start":5,"column_end":76}},{"value":"/ itself.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":4135,"byte_end":4146,"line_start":123,"line_end":123,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":4151,"byte_end":4154,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ If the cell has not yet been filled, the cell is first filled using the","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":4159,"byte_end":4234,"line_start":125,"line_end":125,"column_start":5,"column_end":80}},{"value":"/ function provided.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":4239,"byte_end":4261,"line_start":126,"line_end":126,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":4266,"byte_end":4269,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":4274,"byte_end":4286,"line_start":128,"line_end":128,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":4291,"byte_end":4294,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ Panics if the cell becomes filled as a side effect of `f`.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":4299,"byte_end":4361,"line_start":130,"line_end":130,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":20},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":5006,"byte_end":5021,"line_start":151,"line_end":151,"column_start":12,"column_end":27},"name":"borrow_mut_with","qualname":"<LazyCell<T>>::borrow_mut_with","value":"fn <F> (&mut self, f: F) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Borrows the contents of this `LazyCell` mutably for the duration of the\n cell itself.","sig":null,"attributes":[{"value":"/ Borrows the contents of this `LazyCell` mutably for the duration of the","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":4683,"byte_end":4758,"line_start":142,"line_end":142,"column_start":5,"column_end":80}},{"value":"/ cell itself.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":4763,"byte_end":4779,"line_start":143,"line_end":143,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":4784,"byte_end":4787,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ If the cell has not yet been filled, the cell is first filled using the","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":4792,"byte_end":4867,"line_start":145,"line_end":145,"column_start":5,"column_end":80}},{"value":"/ function provided.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":4872,"byte_end":4894,"line_start":146,"line_end":146,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":4899,"byte_end":4902,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":4907,"byte_end":4919,"line_start":148,"line_end":148,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":4924,"byte_end":4927,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ Panics if the cell becomes filled as a side effect of `f`.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":4932,"byte_end":4994,"line_start":150,"line_end":150,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":5494,"byte_end":5509,"line_start":167,"line_end":167,"column_start":12,"column_end":27},"name":"try_borrow_with","qualname":"<LazyCell<T>>::try_borrow_with","value":"fn <E, F> (&self, f: F) -> Result<&T, E>","parent":null,"children":[],"decl_id":null,"docs":" Same as `borrow_with`, but allows the initializing function to fail.","sig":null,"attributes":[{"value":"/ Same as `borrow_with`, but allows the initializing function to fail.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":5310,"byte_end":5382,"line_start":162,"line_end":162,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":5387,"byte_end":5390,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":5395,"byte_end":5407,"line_start":164,"line_end":164,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":5412,"byte_end":5415,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ Panics if the cell becomes filled as a side effect of `f`.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":5420,"byte_end":5482,"line_start":166,"line_end":166,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":6054,"byte_end":6073,"line_start":185,"line_end":185,"column_start":12,"column_end":31},"name":"try_borrow_mut_with","qualname":"<LazyCell<T>>::try_borrow_mut_with","value":"fn <E, F> (&mut self, f: F) -> Result<&mut T, E>","parent":null,"children":[],"decl_id":null,"docs":" Same as `borrow_mut_with`, but allows the initializing function to fail.","sig":null,"attributes":[{"value":"/ Same as `borrow_mut_with`, but allows the initializing function to fail.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":5866,"byte_end":5942,"line_start":180,"line_end":180,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":5947,"byte_end":5950,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":5955,"byte_end":5967,"line_start":182,"line_end":182,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":5972,"byte_end":5975,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ Panics if the cell becomes filled as a side effect of `f`.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":5980,"byte_end":6042,"line_start":184,"line_end":184,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":6522,"byte_end":6532,"line_start":199,"line_end":199,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<LazyCell<T>>::into_inner","value":"fn (self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this `LazyCell`, returning the underlying value.\n","sig":null,"attributes":[{"value":"/ Consumes this `LazyCell`, returning the underlying value.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":6449,"byte_end":6510,"line_start":198,"line_end":198,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":7068,"byte_end":7071,"line_start":213,"line_end":213,"column_start":12,"column_end":15},"name":"get","qualname":"<LazyCell<T>>::get","value":"fn (&self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of the contents of the lazy cell.","sig":null,"attributes":[{"value":"/ Returns a copy of the contents of the lazy cell.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":6855,"byte_end":6907,"line_start":209,"line_end":209,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":6912,"byte_end":6915,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ This function will return `Some` if the cell has been previously initialized,","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":6920,"byte_end":7001,"line_start":211,"line_end":211,"column_start":5,"column_end":86}},{"value":"/ and `None` if it has not yet been initialized.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":7006,"byte_end":7056,"line_start":212,"line_end":212,"column_start":5,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":67},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":7751,"byte_end":7765,"line_start":236,"line_end":236,"column_start":12,"column_end":26},"name":"AtomicLazyCell","qualname":"::AtomicLazyCell","value":"AtomicLazyCell {  }","parent":null,"children":[{"krate":0,"index":69},{"krate":0,"index":70}],"decl_id":null,"docs":" A lazily filled and thread-safe `Cell`, with frozen contents.\n","sig":null,"attributes":[{"value":"/ A lazily filled and thread-safe `Cell`, with frozen contents.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":7648,"byte_end":7713,"line_start":234,"line_end":234,"column_start":1,"column_end":66}}]},{"kind":"Const","id":{"krate":0,"index":40},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":7909,"byte_end":7913,"line_start":243,"line_end":243,"column_start":15,"column_end":19},"name":"NONE","qualname":"::AtomicLazyCell::<T>::NONE","value":"Self","parent":{"krate":0,"index":38},"children":[],"decl_id":null,"docs":" An empty `AtomicLazyCell`.\n","sig":null,"attributes":[{"value":"/ An empty `AtomicLazyCell`.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":7864,"byte_end":7894,"line_start":242,"line_end":242,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":8073,"byte_end":8076,"line_start":249,"line_end":249,"column_start":12,"column_end":15},"name":"new","qualname":"<AtomicLazyCell<T>>::new","value":"fn () -> AtomicLazyCell<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new, empty, `AtomicLazyCell`.\n","sig":null,"attributes":[{"value":"/ Creates a new, empty, `AtomicLazyCell`.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":8018,"byte_end":8061,"line_start":248,"line_end":248,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":8259,"byte_end":8263,"line_start":256,"line_end":256,"column_start":12,"column_end":16},"name":"fill","qualname":"<AtomicLazyCell<T>>::fill","value":"fn (&self, t: T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Put a value into this cell.","sig":null,"attributes":[{"value":"/ Put a value into this cell.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":8132,"byte_end":8163,"line_start":253,"line_end":253,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":8168,"byte_end":8171,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ This function will return `Err(value)` is the cell is already full.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":8176,"byte_end":8247,"line_start":255,"line_end":255,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":9080,"byte_end":9087,"line_start":280,"line_end":280,"column_start":12,"column_end":19},"name":"replace","qualname":"<AtomicLazyCell<T>>::replace","value":"fn (&mut self, value: T) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Put a value into this cell.","sig":null,"attributes":[{"value":"/ Put a value into this cell.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":8626,"byte_end":8657,"line_start":270,"line_end":270,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":8662,"byte_end":8665,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ Note that this function is infallible but requires `&mut self`. By","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":8670,"byte_end":8740,"line_start":272,"line_end":272,"column_start":5,"column_end":75}},{"value":"/ requiring `&mut self` we're guaranteed that no active borrows to this","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":8745,"byte_end":8818,"line_start":273,"line_end":273,"column_start":5,"column_end":78}},{"value":"/ cell can exist so we can always fill in the value. This may not always","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":8823,"byte_end":8897,"line_start":274,"line_end":274,"column_start":5,"column_end":79}},{"value":"/ be usable, however, as `&mut self` may not be possible to borrow.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":8902,"byte_end":8971,"line_start":275,"line_end":275,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":8976,"byte_end":8979,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ # Return value","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":8984,"byte_end":9002,"line_start":277,"line_end":277,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":9007,"byte_end":9010,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ This function returns the previous value, if any.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":9015,"byte_end":9068,"line_start":279,"line_end":279,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":9422,"byte_end":9428,"line_start":289,"line_end":289,"column_start":12,"column_end":18},"name":"filled","qualname":"<AtomicLazyCell<T>>::filled","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether this cell has been previously filled.\n","sig":null,"attributes":[{"value":"/ Test whether this cell has been previously filled.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":9356,"byte_end":9410,"line_start":288,"line_end":288,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":9756,"byte_end":9762,"line_start":298,"line_end":298,"column_start":12,"column_end":18},"name":"borrow","qualname":"<AtomicLazyCell<T>>::borrow","value":"fn (&self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Borrows the contents of this lazy cell for the duration of the cell\n itself.","sig":null,"attributes":[{"value":"/ Borrows the contents of this lazy cell for the duration of the cell","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":9508,"byte_end":9579,"line_start":293,"line_end":293,"column_start":5,"column_end":76}},{"value":"/ itself.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":9584,"byte_end":9595,"line_start":294,"line_end":294,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":9600,"byte_end":9603,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ This function will return `Some` if the cell has been previously","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":9608,"byte_end":9676,"line_start":296,"line_end":296,"column_start":5,"column_end":73}},{"value":"/ initialized, and `None` if it has not yet been initialized.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":9681,"byte_end":9744,"line_start":297,"line_end":297,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":10014,"byte_end":10024,"line_start":306,"line_end":306,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<AtomicLazyCell<T>>::into_inner","value":"fn (self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this `LazyCell`, returning the underlying value.\n","sig":null,"attributes":[{"value":"/ Consumes this `LazyCell`, returning the underlying value.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":9941,"byte_end":10002,"line_start":305,"line_end":305,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":10566,"byte_end":10569,"line_start":320,"line_end":320,"column_start":12,"column_end":15},"name":"get","qualname":"<AtomicLazyCell<T>>::get","value":"fn (&self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of the contents of the lazy cell.","sig":null,"attributes":[{"value":"/ Returns a copy of the contents of the lazy cell.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":10353,"byte_end":10405,"line_start":316,"line_end":316,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":10410,"byte_end":10413,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ This function will return `Some` if the cell has been previously initialized,","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":10418,"byte_end":10499,"line_start":318,"line_end":318,"column_start":5,"column_end":86}},{"value":"/ and `None` if it has not yet been initialized.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":10504,"byte_end":10554,"line_start":319,"line_end":319,"column_start":5,"column_end":55}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":2154,"byte_end":2162,"line_start":66,"line_end":66,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":22},{"krate":0,"index":25},{"krate":0,"index":28}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":6837,"byte_end":6845,"line_start":208,"line_end":208,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":31}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":7166,"byte_end":7174,"line_start":218,"line_end":218,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":34}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":7840,"byte_end":7854,"line_start":241,"line_end":241,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":10329,"byte_end":10343,"line_start":315,"line_end":315,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":49}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":10760,"byte_end":10774,"line_start":328,"line_end":328,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":52}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":11336,"byte_end":11350,"line_start":345,"line_end":345,"column_start":38,"column_end":52},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":11388,"byte_end":11402,"line_start":347,"line_end":347,"column_start":31,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":2154,"byte_end":2162,"line_start":66,"line_end":66,"column_start":9,"column_end":17},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":58},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":6837,"byte_end":6845,"line_start":208,"line_end":208,"column_start":15,"column_end":23},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":58},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":7166,"byte_end":7174,"line_start":218,"line_end":218,"column_start":27,"column_end":35},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":58},"to":{"krate":1,"index":1604}},{"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":7840,"byte_end":7854,"line_start":241,"line_end":241,"column_start":9,"column_end":23},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":67},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":10329,"byte_end":10343,"line_start":315,"line_end":315,"column_start":15,"column_end":29},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":67},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":10760,"byte_end":10774,"line_start":328,"line_end":328,"column_start":26,"column_end":40},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":67},"to":{"krate":1,"index":1604}},{"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":11336,"byte_end":11350,"line_start":345,"line_end":345,"column_start":38,"column_end":52},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":67},"to":{"krate":1,"index":1915}},{"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","byte_start":11388,"byte_end":11402,"line_start":347,"line_end":347,"column_start":31,"column_end":45},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":67},"to":{"krate":1,"index":1903}}]}