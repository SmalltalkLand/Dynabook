{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0","program":"/home/grahamk/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","wayland_commons","--edition=2018","/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-Cembed-bitcode=no","-C","debuginfo=2","-C","metadata=608750d6bd5c9272","-C","extra-filename=-608750d6bd5c9272","--out-dir","/home/grahamk/dynabook/booter/booter/target/rls/debug/deps","-L","dependency=/home/grahamk/dynabook/booter/booter/target/rls/debug/deps","--extern","nix=/home/grahamk/dynabook/booter/booter/target/rls/debug/deps/libnix-0798d05400e086ba.rmeta","--extern","once_cell=/home/grahamk/dynabook/booter/booter/target/rls/debug/deps/libonce_cell-b92146020e4dca88.rmeta","--extern","smallvec=/home/grahamk/dynabook/booter/booter/target/rls/debug/deps/libsmallvec-50ee3a84a140355e.rmeta","--extern","wayland_sys=/home/grahamk/dynabook/booter/booter/target/rls/debug/deps/libwayland_sys-8d6c52fe34f10d56.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/grahamk/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/grahamk/dynabook/booter/booter/target/rls/debug/deps/libwayland_commons-608750d6bd5c9272.rmeta"},"prelude":{"crate_id":{"name":"wayland_commons","disambiguator":[13471723004724593828,14113464332139614394]},"crate_root":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src","external_crates":[{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[14045440404761711878,14828778038164510514]}},{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[7820758769895212465,18238673129907254737]}},{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[9963577696039191896,9299225972135698896]}},{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[5115750228290021017,18426691258663503339]}},{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[8142361000642295370,12116541476300662820]}},{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[10087414976326374924,14391090676338821578]}},{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[8340036686731517060,16423069435016404652]}},{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[2971787223733165080,17737825855946891561]}},{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[10338496606251499561,7959271942740760993]}},{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[17233880546926637686,13266504452914808604]}},{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[12870332656920028317,4085626084947596610]}},{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[11596937576886367077,15208627022316773696]}},{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[15537301489062449107,1809873510282706894]}},{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[3248978736625587480,14843280920921965555]}},{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","num":15,"id":{"name":"nix","disambiguator":[13540714205420969218,5724225019889932973]}},{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","num":16,"id":{"name":"bitflags","disambiguator":[507454489459724971,17846516183145319796]}},{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","num":17,"id":{"name":"cfg_if","disambiguator":[7008153763524738524,6022588606777036031]}},{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","num":18,"id":{"name":"void","disambiguator":[12480576845785780854,8684156825246271878]}},{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","num":19,"id":{"name":"libc","disambiguator":[8584546836761022199,10657780881138546681]}},{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","num":20,"id":{"name":"wayland_sys","disambiguator":[14127959698620435228,17499192976440989246]}},{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","num":21,"id":{"name":"once_cell","disambiguator":[6698591949067818540,9500560772408366786]}},{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","num":22,"id":{"name":"smallvec","disambiguator":[10897988078027423975,14253897970687383862]}}],"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":0,"byte_end":7267,"line_start":1,"line_end":220,"column_start":1,"column_end":50}},"imports":[{"kind":"Use","ref_id":{"krate":22,"index":37},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":973,"byte_end":981,"line_start":31,"line_end":31,"column_start":19,"column_end":27},"alias_span":null,"name":"smallvec","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":0,"byte_end":7267,"line_start":1,"line_end":220,"column_start":1,"column_end":50},"name":"","qualname":"::","value":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":15},{"krate":0,"index":48},{"krate":0,"index":88},{"krate":0,"index":154},{"krate":0,"index":247},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":312},{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":333},{"krate":0,"index":337},{"krate":0,"index":340},{"krate":0,"index":346},{"krate":0,"index":349},{"krate":0,"index":351}],"decl_id":null,"docs":" Common definitions for wayland","sig":null,"attributes":[{"value":"! Common definitions for wayland","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":0,"byte_end":34,"line_start":1,"line_end":1,"column_start":1,"column_end":35}},{"value":"!","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":35,"byte_end":38,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! This crate hosts common type and traits used to represent wayland messages","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":39,"byte_end":117,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"! and routines in the `wayland-client` and `wayland-server` crates.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":118,"byte_end":187,"line_start":4,"line_end":4,"column_start":1,"column_end":70}},{"value":"!","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":188,"byte_end":191,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! This notably includes the `Interface` trait, which can exhaustively describe","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":192,"byte_end":272,"line_start":6,"line_end":6,"column_start":1,"column_end":81}},{"value":"! any wayland interface. Its implementations are intended to be generated by the","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":273,"byte_end":355,"line_start":7,"line_end":7,"column_start":1,"column_end":83}},{"value":"! `wayland-scanner` crate.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":356,"byte_end":384,"line_start":8,"line_end":8,"column_start":1,"column_end":29}},{"value":"!","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":385,"byte_end":388,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"! The principal user-facing definition provided by this crate is the `Implementation`","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":389,"byte_end":476,"line_start":10,"line_end":10,"column_start":1,"column_end":88}},{"value":"! trait, which as a user of `wayland-client` or `wayland-server` you will be using","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":477,"byte_end":561,"line_start":11,"line_end":11,"column_start":1,"column_end":85}},{"value":"! to define objects able to handle the messages your program receives. Note that","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":562,"byte_end":644,"line_start":12,"line_end":12,"column_start":1,"column_end":83}},{"value":"! this trait is auto-implemented for closures with appropriate signature, for","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":645,"byte_end":724,"line_start":13,"line_end":13,"column_start":1,"column_end":80}},{"value":"! convenience.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":725,"byte_end":741,"line_start":14,"line_end":14,"column_start":1,"column_end":17}},{"value":"warn(missing_docs)","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":743,"byte_end":765,"line_start":16,"line_end":16,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":6},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/debug.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"debug","qualname":"::debug","value":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/debug.rs","parent":null,"children":[{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14}],"decl_id":null,"docs":" Debugging helpers to handle `WAYLAND_DEBUG` env variable.\n","sig":null,"attributes":[{"value":"! Debugging helpers to handle `WAYLAND_DEBUG` env variable.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/debug.rs","byte_start":7269,"byte_end":7330,"line_start":1,"line_end":1,"column_start":1,"column_end":62}}]},{"kind":"Function","id":{"krate":0,"index":11},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/debug.rs","byte_start":7526,"byte_end":7550,"line_start":10,"line_end":10,"column_start":8,"column_end":32},"name":"print_dispatched_message","qualname":"::debug::print_dispatched_message","value":"fn (interface: &str, id: u32, msg_name: &str, args: &[Argument]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Print the dispatched message to stderr in a following format:","sig":null,"attributes":[{"value":"/ Print the dispatched message to stderr in a following format:","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/debug.rs","byte_start":7402,"byte_end":7467,"line_start":7,"line_end":7,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/debug.rs","byte_start":7468,"byte_end":7471,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ [timestamp] <- interface@id.msg_name(args)","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/debug.rs","byte_start":7472,"byte_end":7518,"line_start":9,"line_end":9,"column_start":1,"column_end":47}}]},{"kind":"Function","id":{"krate":0,"index":12},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/debug.rs","byte_start":7978,"byte_end":7996,"line_start":27,"line_end":27,"column_start":8,"column_end":26},"name":"print_send_message","qualname":"::debug::print_send_message","value":"fn (interface: &str, id: u32, is_alive: bool, msg_name: &str, args: &[Argument]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Print the send message to stderr in a following format:","sig":null,"attributes":[{"value":"/ Print the send message to stderr in a following format:","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/debug.rs","byte_start":7791,"byte_end":7850,"line_start":22,"line_end":22,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/debug.rs","byte_start":7851,"byte_end":7854,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ [timestamp] -> interface@id.msg_name(args)","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/debug.rs","byte_start":7855,"byte_end":7901,"line_start":24,"line_end":24,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/debug.rs","byte_start":7902,"byte_end":7905,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ If `is_alive` is `false` the `[ZOMBIE]` is added after `id`.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/debug.rs","byte_start":7906,"byte_end":7970,"line_start":26,"line_end":26,"column_start":1,"column_end":65}}]},{"kind":"Mod","id":{"krate":0,"index":15},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/filter.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"filter","qualname":"::filter","value":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/filter.rs","parent":null,"children":[{"krate":0,"index":16},{"krate":0,"index":20},{"krate":0,"index":23},{"krate":0,"index":30},{"krate":0,"index":35},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":43}],"decl_id":null,"docs":" Filter\n","sig":null,"attributes":[{"value":"! Filter","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/filter.rs","byte_start":9023,"byte_end":9033,"line_start":1,"line_end":1,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":20},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/filter.rs","byte_start":9583,"byte_end":9595,"line_start":15,"line_end":15,"column_start":12,"column_end":24},"name":"DispatchData","qualname":"::filter::DispatchData","value":"DispatchData {  }","parent":null,"children":[{"krate":0,"index":22}],"decl_id":null,"docs":" Holder of global dispatch-related data","sig":null,"attributes":[{"value":"/ Holder of global dispatch-related data","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/filter.rs","byte_start":9093,"byte_end":9135,"line_start":5,"line_end":5,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/filter.rs","byte_start":9136,"byte_end":9139,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ This struct serves as a dynamic container for the dispatch-time","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/filter.rs","byte_start":9140,"byte_end":9207,"line_start":7,"line_end":7,"column_start":1,"column_end":68}},{"value":"/ global data that you gave to the dispatch method, and is given as","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/filter.rs","byte_start":9208,"byte_end":9277,"line_start":8,"line_end":8,"column_start":1,"column_end":70}},{"value":"/ input to all your callbacks. It allows you to share global state","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/filter.rs","byte_start":9278,"byte_end":9346,"line_start":9,"line_end":9,"column_start":1,"column_end":69}},{"value":"/ between your filters.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/filter.rs","byte_start":9347,"byte_end":9372,"line_start":10,"line_end":10,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/filter.rs","byte_start":9373,"byte_end":9376,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ The main method of interest is the `get` method, which allows you to","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/filter.rs","byte_start":9377,"byte_end":9449,"line_start":12,"line_end":12,"column_start":1,"column_end":73}},{"value":"/ access a `&mut _` reference to the global data itself. The other methods","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/filter.rs","byte_start":9450,"byte_end":9526,"line_start":13,"line_end":13,"column_start":1,"column_end":77}},{"value":"/ are mostly used internally by the crate.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/filter.rs","byte_start":9527,"byte_end":9571,"line_start":14,"line_end":14,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/filter.rs","byte_start":9826,"byte_end":9829,"line_start":24,"line_end":24,"column_start":12,"column_end":15},"name":"get","qualname":"<DispatchData>::get","value":"fn <T> (&mut self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Access the dispatch data knowing its type","sig":null,"attributes":[{"value":"/ Access the dispatch data knowing its type","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/filter.rs","byte_start":9674,"byte_end":9719,"line_start":20,"line_end":20,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/filter.rs","byte_start":9724,"byte_end":9727,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ Will return `None` if the provided type is not the correct","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/filter.rs","byte_start":9732,"byte_end":9794,"line_start":22,"line_end":22,"column_start":5,"column_end":67}},{"value":"/ inner type.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/filter.rs","byte_start":9799,"byte_end":9814,"line_start":23,"line_end":23,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":27},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/filter.rs","byte_start":10038,"byte_end":10042,"line_start":31,"line_end":31,"column_start":12,"column_end":16},"name":"wrap","qualname":"<DispatchData>::wrap","value":"fn <T> (data: &'a mut T) -> DispatchData<'a>","parent":null,"children":[],"decl_id":null,"docs":" Wrap a mutable reference","sig":null,"attributes":[{"value":"/ Wrap a mutable reference","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/filter.rs","byte_start":9923,"byte_end":9951,"line_start":28,"line_end":28,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/filter.rs","byte_start":9956,"byte_end":9959,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ This creates a new `DispatchData` from a mutable reference","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/filter.rs","byte_start":9964,"byte_end":10026,"line_start":30,"line_end":30,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/filter.rs","byte_start":10426,"byte_end":10434,"line_start":40,"line_end":40,"column_start":12,"column_end":20},"name":"reborrow","qualname":"<DispatchData>::reborrow","value":"fn (&mut self) -> DispatchData","parent":null,"children":[],"decl_id":null,"docs":" Reborrows this `DispatchData` to create a new one with the same content","sig":null,"attributes":[{"value":"/ Reborrows this `DispatchData` to create a new one with the same content","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/filter.rs","byte_start":10141,"byte_end":10216,"line_start":35,"line_end":35,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/filter.rs","byte_start":10221,"byte_end":10224,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ This is a quick and cheap way to propagate the `DispatchData` down a","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/filter.rs","byte_start":10229,"byte_end":10301,"line_start":37,"line_end":37,"column_start":5,"column_end":77}},{"value":"/ callback stack by value. It is basically a noop only there to ease","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/filter.rs","byte_start":10306,"byte_end":10376,"line_start":38,"line_end":38,"column_start":5,"column_end":75}},{"value":"/ work with the borrow checker.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/filter.rs","byte_start":10381,"byte_end":10414,"line_start":39,"line_end":39,"column_start":5,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":37},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/filter.rs","byte_start":11314,"byte_end":11320,"line_start":66,"line_end":66,"column_start":12,"column_end":18},"name":"Filter","qualname":"::filter::Filter","value":"Filter {  }","parent":null,"children":[{"krate":0,"index":39}],"decl_id":null,"docs":" An event filter","sig":null,"attributes":[{"value":"/ An event filter","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/filter.rs","byte_start":10681,"byte_end":10700,"line_start":52,"line_end":52,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/filter.rs","byte_start":10701,"byte_end":10704,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ Can be used in wayland-client and wayland-server to aggregate","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/filter.rs","byte_start":10705,"byte_end":10770,"line_start":54,"line_end":54,"column_start":1,"column_end":66}},{"value":"/ messages from different objects into the same closure.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/filter.rs","byte_start":10771,"byte_end":10829,"line_start":55,"line_end":55,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/filter.rs","byte_start":10830,"byte_end":10833,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ You need to provide it a closure of type `FnMut(E, &Filter<E>)`,","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/filter.rs","byte_start":10834,"byte_end":10902,"line_start":57,"line_end":57,"column_start":1,"column_end":69}},{"value":"/ which will be called any time a message is sent to the filter","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/filter.rs","byte_start":10903,"byte_end":10968,"line_start":58,"line_end":58,"column_start":1,"column_end":66}},{"value":"/ via the `send(..)` method. Your closure also receives a handle","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/filter.rs","byte_start":10969,"byte_end":11035,"line_start":59,"line_end":59,"column_start":1,"column_end":67}},{"value":"/ to the filter as argument, so that you can use it from within","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/filter.rs","byte_start":11036,"byte_end":11101,"line_start":60,"line_end":60,"column_start":1,"column_end":66}},{"value":"/ the callback (to assign new wayland objects to this filter for","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/filter.rs","byte_start":11102,"byte_end":11168,"line_start":61,"line_end":61,"column_start":1,"column_end":67}},{"value":"/ example).","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/filter.rs","byte_start":11169,"byte_end":11182,"line_start":62,"line_end":62,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/filter.rs","byte_start":11183,"byte_end":11186,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ The `Filter` can be cloned, and all clones send messages to the","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/filter.rs","byte_start":11187,"byte_end":11254,"line_start":64,"line_end":64,"column_start":1,"column_end":68}},{"value":"/ same closure. However it is not threadsafe.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/filter.rs","byte_start":11255,"byte_end":11302,"line_start":65,"line_end":65,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/filter.rs","byte_start":11554,"byte_end":11557,"line_start":78,"line_end":78,"column_start":12,"column_end":15},"name":"new","qualname":"<Filter<E>>::new","value":"fn <F> (f: F) -> Filter<E>","parent":null,"children":[],"decl_id":null,"docs":" Create a new filter from given closure\n","sig":null,"attributes":[{"value":"/ Create a new filter from given closure","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/filter.rs","byte_start":11500,"byte_end":11542,"line_start":77,"line_end":77,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/filter.rs","byte_start":11814,"byte_end":11818,"line_start":85,"line_end":85,"column_start":12,"column_end":16},"name":"send","qualname":"<Filter<E>>::send","value":"fn (&self, evt: E, mut data: DispatchData) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Send a message to this filter\n","sig":null,"attributes":[{"value":"/ Send a message to this filter","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/filter.rs","byte_start":11769,"byte_end":11802,"line_start":84,"line_end":84,"column_start":5,"column_end":38}}]},{"kind":"Mod","id":{"krate":0,"index":48},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"map","qualname":"::map","value":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","parent":null,"children":[{"krate":0,"index":49},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":57},{"krate":0,"index":353},{"krate":0,"index":362},{"krate":0,"index":59},{"krate":0,"index":68},{"krate":0,"index":365},{"krate":0,"index":369},{"krate":0,"index":71},{"krate":0,"index":84},{"krate":0,"index":86}],"decl_id":null,"docs":" Wayland objects map\n","sig":null,"attributes":[{"value":"! Wayland objects map","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":12342,"byte_end":12365,"line_start":1,"line_end":1,"column_start":1,"column_end":24}}]},{"kind":"Const","id":{"krate":0,"index":54},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":12536,"byte_end":12551,"line_start":7,"line_end":7,"column_start":11,"column_end":26},"name":"SERVER_ID_LIMIT","qualname":"::map::SERVER_ID_LIMIT","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Limit separating server-created from client-created objects IDs in the namespace\n","sig":null,"attributes":[{"value":"/ Limit separating server-created from client-created objects IDs in the namespace","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":12441,"byte_end":12525,"line_start":6,"line_end":6,"column_start":1,"column_end":85}}]},{"kind":"Trait","id":{"krate":0,"index":55},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":12675,"byte_end":12689,"line_start":11,"line_end":11,"column_start":11,"column_end":25},"name":"ObjectMetadata","qualname":"::map::ObjectMetadata","value":"ObjectMetadata: Clone","parent":null,"children":[{"krate":0,"index":56}],"decl_id":null,"docs":" A trait representing the metadata a wayland implementation\n may attach to an object.\n","sig":null,"attributes":[{"value":"/ A trait representing the metadata a wayland implementation","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":12573,"byte_end":12635,"line_start":9,"line_end":9,"column_start":1,"column_end":63}},{"value":"/ may attach to an object.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":12636,"byte_end":12664,"line_start":10,"line_end":10,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":12830,"byte_end":12835,"line_start":15,"line_end":15,"column_start":8,"column_end":13},"name":"child","qualname":"::map::ObjectMetadata::child","value":"fn (&self) -> Self","parent":{"krate":0,"index":55},"children":[],"decl_id":null,"docs":" Create the metadata for a child object","sig":null,"attributes":[{"value":"/ Create the metadata for a child object","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":12703,"byte_end":12745,"line_start":12,"line_end":12,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":12750,"byte_end":12753,"line_start":13,"line_end":13,"column_start":5,"column_end":8}},{"value":"/ Mostly needed for client side, to propagate the event queues","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":12758,"byte_end":12822,"line_start":14,"line_end":14,"column_start":5,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":353},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":12982,"byte_end":12988,"line_start":24,"line_end":24,"column_start":12,"column_end":18},"name":"Object","qualname":"::map::Object","value":"Object { interface, version, requests, events, meta, childs_from_events, childs_from_requests }","parent":null,"children":[{"krate":0,"index":355},{"krate":0,"index":356},{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":359},{"krate":0,"index":360},{"krate":0,"index":361}],"decl_id":null,"docs":" The representation of a protocol object\n","sig":null,"attributes":[{"value":"/ The representation of a protocol object","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":12910,"byte_end":12953,"line_start":22,"line_end":22,"column_start":1,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":355},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":13059,"byte_end":13068,"line_start":26,"line_end":26,"column_start":9,"column_end":18},"name":"interface","qualname":"::map::Object::interface","value":"&'static str","parent":{"krate":0,"index":353},"children":[],"decl_id":null,"docs":" Interface name of this object\n","sig":null,"attributes":[{"value":"/ Interface name of this object","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":13017,"byte_end":13050,"line_start":25,"line_end":25,"column_start":5,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":356},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":13123,"byte_end":13130,"line_start":28,"line_end":28,"column_start":9,"column_end":16},"name":"version","qualname":"::map::Object::version","value":"u32","parent":{"krate":0,"index":353},"children":[],"decl_id":null,"docs":" Version of this object\n","sig":null,"attributes":[{"value":"/ Version of this object","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":13088,"byte_end":13114,"line_start":27,"line_end":27,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":357},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":13196,"byte_end":13204,"line_start":30,"line_end":30,"column_start":9,"column_end":17},"name":"requests","qualname":"::map::Object::requests","value":"&'static [wire::MessageDesc]","parent":{"krate":0,"index":353},"children":[],"decl_id":null,"docs":" Description of the requests of this object\n","sig":null,"attributes":[{"value":"/ Description of the requests of this object","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":13141,"byte_end":13187,"line_start":29,"line_end":29,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":358},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":13300,"byte_end":13306,"line_start":32,"line_end":32,"column_start":9,"column_end":15},"name":"events","qualname":"::map::Object::events","value":"&'static [wire::MessageDesc]","parent":{"krate":0,"index":353},"children":[],"decl_id":null,"docs":" Description of the events of this object\n","sig":null,"attributes":[{"value":"/ Description of the events of this object","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":13247,"byte_end":13291,"line_start":31,"line_end":31,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":359},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":13430,"byte_end":13434,"line_start":34,"line_end":34,"column_start":9,"column_end":13},"name":"meta","qualname":"::map::Object::meta","value":"Meta","parent":{"krate":0,"index":353},"children":[],"decl_id":null,"docs":" Metadata associated to this object (ex: its event queue client side)\n","sig":null,"attributes":[{"value":"/ Metadata associated to this object (ex: its event queue client side)","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":13349,"byte_end":13421,"line_start":33,"line_end":33,"column_start":5,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":360},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":13582,"byte_end":13600,"line_start":37,"line_end":37,"column_start":9,"column_end":27},"name":"childs_from_events","qualname":"::map::Object::childs_from_events","value":"for<'r> fn(u16, u32, &'r Meta) -> std::option::Option<map::Object<Meta>>","parent":{"krate":0,"index":353},"children":[],"decl_id":null,"docs":" A function which, from an opcode, a version, and the Meta, creates a child\n object associated with this event if any\n","sig":null,"attributes":[{"value":"/ A function which, from an opcode, a version, and the Meta, creates a child","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":13446,"byte_end":13524,"line_start":35,"line_end":35,"column_start":5,"column_end":83}},{"value":"/ object associated with this event if any","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":13529,"byte_end":13573,"line_start":36,"line_end":36,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":361},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":13789,"byte_end":13809,"line_start":40,"line_end":40,"column_start":9,"column_end":29},"name":"childs_from_requests","qualname":"::map::Object::childs_from_requests","value":"for<'r> fn(u16, u32, &'r Meta) -> std::option::Option<map::Object<Meta>>","parent":{"krate":0,"index":353},"children":[],"decl_id":null,"docs":" A function which, from an opcode, a version, and the Meta, creates a child\n object associated with this request if any\n","sig":null,"attributes":[{"value":"/ A function which, from an opcode, a version, and the Meta, creates a child","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":13651,"byte_end":13729,"line_start":38,"line_end":38,"column_start":5,"column_end":83}},{"value":"/ object associated with this request if any","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":13734,"byte_end":13780,"line_start":39,"line_end":39,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":13982,"byte_end":13996,"line_start":45,"line_end":45,"column_start":12,"column_end":26},"name":"from_interface","qualname":"<Object<Meta>>::from_interface","value":"fn <I> (version: u32, meta: Meta) -> Object<Meta>","parent":null,"children":[],"decl_id":null,"docs":" Create an Object corresponding to given interface and version\n","sig":null,"attributes":[{"value":"/ Create an Object corresponding to given interface and version","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":13905,"byte_end":13970,"line_start":44,"line_end":44,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":14503,"byte_end":14514,"line_start":59,"line_end":59,"column_start":12,"column_end":23},"name":"event_child","qualname":"<Object<Meta>>::event_child","value":"fn (&self, opcode: u16) -> Option<Object<Meta>>","parent":null,"children":[],"decl_id":null,"docs":" Create an optional `Object` corresponding to the possible `new_id` associated\n with given event opcode\n","sig":null,"attributes":[{"value":"/ Create an optional `Object` corresponding to the possible `new_id` associated","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":14378,"byte_end":14459,"line_start":57,"line_end":57,"column_start":5,"column_end":86}},{"value":"/ with given event opcode","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":14464,"byte_end":14491,"line_start":58,"line_end":58,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":14767,"byte_end":14780,"line_start":65,"line_end":65,"column_start":12,"column_end":25},"name":"request_child","qualname":"<Object<Meta>>::request_child","value":"fn (&self, opcode: u16) -> Option<Object<Meta>>","parent":null,"children":[],"decl_id":null,"docs":" Create an optional `Object` corresponding to the possible `new_id` associated\n with given request opcode\n","sig":null,"attributes":[{"value":"/ Create an optional `Object` corresponding to the possible `new_id` associated","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":14640,"byte_end":14721,"line_start":63,"line_end":63,"column_start":5,"column_end":86}},{"value":"/ with given request opcode","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":14726,"byte_end":14755,"line_start":64,"line_end":64,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":14971,"byte_end":14983,"line_start":70,"line_end":70,"column_start":12,"column_end":24},"name":"is_interface","qualname":"<Object<Meta>>::is_interface","value":"fn <I> (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check whether this object is of given interface\n","sig":null,"attributes":[{"value":"/ Check whether this object is of given interface","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":14908,"byte_end":14959,"line_start":69,"line_end":69,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":15206,"byte_end":15217,"line_start":76,"line_end":76,"column_start":12,"column_end":23},"name":"placeholder","qualname":"<Object<Meta>>::placeholder","value":"fn (meta: Meta) -> Object<Meta>","parent":null,"children":[],"decl_id":null,"docs":" Create a placeholder object that will be filled-in by the message logic\n","sig":null,"attributes":[{"value":"/ Create a placeholder object that will be filled-in by the message logic","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":15119,"byte_end":15194,"line_start":75,"line_end":75,"column_start":5,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":365},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":15904,"byte_end":15913,"line_start":102,"line_end":102,"column_start":12,"column_end":21},"name":"ObjectMap","qualname":"::map::ObjectMap","value":"ObjectMap {  }","parent":null,"children":[{"krate":0,"index":367},{"krate":0,"index":368}],"decl_id":null,"docs":" A holder for the object store of a connection","sig":null,"attributes":[{"value":"/ A holder for the object store of a connection","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":15709,"byte_end":15758,"line_start":97,"line_end":97,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":15759,"byte_end":15762,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ Keeps track of which object id is associated to which","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":15763,"byte_end":15820,"line_start":99,"line_end":99,"column_start":1,"column_end":58}},{"value":"/ interface object, and which is currently unused.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":15821,"byte_end":15873,"line_start":100,"line_end":100,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":16129,"byte_end":16132,"line_start":109,"line_end":109,"column_start":12,"column_end":15},"name":"new","qualname":"<ObjectMap<Meta>>::new","value":"fn () -> ObjectMap<Meta>","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty object map\n","sig":null,"attributes":[{"value":"/ Create a new empty object map","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":16084,"byte_end":16117,"line_start":108,"line_end":108,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":16287,"byte_end":16291,"line_start":114,"line_end":114,"column_start":12,"column_end":16},"name":"find","qualname":"<ObjectMap<Meta>>::find","value":"fn (&self, id: u32) -> Option<Object<Meta>>","parent":null,"children":[],"decl_id":null,"docs":" Find an object in the store\n","sig":null,"attributes":[{"value":"/ Find an object in the store","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":16244,"byte_end":16275,"line_start":113,"line_end":113,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":16737,"byte_end":16743,"line_start":127,"line_end":127,"column_start":12,"column_end":18},"name":"remove","qualname":"<ObjectMap<Meta>>::remove","value":"fn (&mut self, id: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Remove an object from the store","sig":null,"attributes":[{"value":"/ Remove an object from the store","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":16622,"byte_end":16657,"line_start":124,"line_end":124,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":16662,"byte_end":16665,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ Does nothing if the object didn't previously exists","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":16670,"byte_end":16725,"line_start":126,"line_end":126,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":17307,"byte_end":17316,"line_start":143,"line_end":143,"column_start":12,"column_end":21},"name":"insert_at","qualname":"<ObjectMap<Meta>>::insert_at","value":"fn (&mut self, id: u32, object: Object<Meta>) -> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" Insert given object for given id","sig":null,"attributes":[{"value":"/ Insert given object for given id","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":17126,"byte_end":17162,"line_start":139,"line_end":139,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":17167,"byte_end":17170,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ Can fail if the requested id is not the next free id of this store.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":17175,"byte_end":17246,"line_start":141,"line_end":141,"column_start":5,"column_end":76}},{"value":"/ (In which case this is a protocol error)","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":17251,"byte_end":17295,"line_start":142,"line_end":142,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":17741,"byte_end":17758,"line_start":154,"line_end":154,"column_start":12,"column_end":29},"name":"client_insert_new","qualname":"<ObjectMap<Meta>>::client_insert_new","value":"fn (&mut self, object: Object<Meta>) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Allocate a new id for an object in the client namespace\n","sig":null,"attributes":[{"value":"/ Allocate a new id for an object in the client namespace","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":17670,"byte_end":17729,"line_start":153,"line_end":153,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":17939,"byte_end":17956,"line_start":159,"line_end":159,"column_start":12,"column_end":29},"name":"server_insert_new","qualname":"<ObjectMap<Meta>>::server_insert_new","value":"fn (&mut self, object: Object<Meta>) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Allocate a new id for an object in the server namespace\n","sig":null,"attributes":[{"value":"/ Allocate a new id for an object in the server namespace","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":17868,"byte_end":17927,"line_start":158,"line_end":158,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":18131,"byte_end":18135,"line_start":164,"line_end":164,"column_start":12,"column_end":16},"name":"with","qualname":"<ObjectMap<Meta>>::with","value":"fn <T, F> (&mut self, id: u32, f: F) -> Result<T, ()>","parent":null,"children":[],"decl_id":null,"docs":" Mutably access an object of the map\n","sig":null,"attributes":[{"value":"/ Mutably access an object of the map","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":18080,"byte_end":18119,"line_start":163,"line_end":163,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":18785,"byte_end":18793,"line_start":184,"line_end":184,"column_start":12,"column_end":20},"name":"with_all","qualname":"<ObjectMap<Meta>>::with_all","value":"fn <F> (&mut self, mut f: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Mutably access all objects of the map in sequence\n","sig":null,"attributes":[{"value":"/ Mutably access all objects of the map in sequence","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":18720,"byte_end":18773,"line_start":183,"line_end":183,"column_start":5,"column_end":58}}]},{"kind":"Mod","id":{"krate":0,"index":88},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"socket","qualname":"::socket","value":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","parent":null,"children":[{"krate":0,"index":89},{"krate":0,"index":94},{"krate":0,"index":99},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":118},{"krate":0,"index":120},{"krate":0,"index":126},{"krate":0,"index":139},{"krate":0,"index":144}],"decl_id":null,"docs":" Wayland socket manipulation\n","sig":null,"attributes":[{"value":"! Wayland socket manipulation","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":20259,"byte_end":20290,"line_start":1,"line_end":1,"column_start":1,"column_end":32}}]},{"kind":"Const","id":{"krate":0,"index":104},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":20580,"byte_end":20591,"line_start":13,"line_end":13,"column_start":11,"column_end":22},"name":"MAX_FDS_OUT","qualname":"::socket::MAX_FDS_OUT","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Maximum number of FD that can be sent in a single socket message\n","sig":null,"attributes":[{"value":"/ Maximum number of FD that can be sent in a single socket message","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":20501,"byte_end":20569,"line_start":12,"line_end":12,"column_start":1,"column_end":69}}]},{"kind":"Const","id":{"krate":0,"index":105},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":20687,"byte_end":20700,"line_start":15,"line_end":15,"column_start":11,"column_end":24},"name":"MAX_BYTES_OUT","qualname":"::socket::MAX_BYTES_OUT","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Maximum number of bytes that can be sent in a single socket message\n","sig":null,"attributes":[{"value":"/ Maximum number of bytes that can be sent in a single socket message","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":20605,"byte_end":20676,"line_start":14,"line_end":14,"column_start":1,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":106},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":20767,"byte_end":20773,"line_start":22,"line_end":22,"column_start":12,"column_end":18},"name":"Socket","qualname":"::socket::Socket","value":"Socket {  }","parent":null,"children":[{"krate":0,"index":107}],"decl_id":null,"docs":" A wayland socket\n","sig":null,"attributes":[{"value":"/ A wayland socket","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":20735,"byte_end":20755,"line_start":21,"line_end":21,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":21141,"byte_end":21149,"line_start":34,"line_end":34,"column_start":12,"column_end":20},"name":"send_msg","qualname":"<Socket>::send_msg","value":"fn (&self, bytes: &[u8], fds: &[RawFd]) -> NixResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Send a single message to the socket","sig":null,"attributes":[{"value":"/ Send a single message to the socket","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":20812,"byte_end":20851,"line_start":27,"line_end":27,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":20856,"byte_end":20859,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ A single socket message can contain several wayland messages","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":20864,"byte_end":20928,"line_start":29,"line_end":29,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":20933,"byte_end":20936,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ The `fds` slice should not be longer than `MAX_FDS_OUT`, and the `bytes`","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":20941,"byte_end":21017,"line_start":31,"line_end":31,"column_start":5,"column_end":81}},{"value":"/ slice should not be longer than `MAX_BYTES_OUT` otherwise the receiving","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":21022,"byte_end":21097,"line_start":32,"line_end":32,"column_start":5,"column_end":80}},{"value":"/ end may lose some data.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":21102,"byte_end":21129,"line_start":33,"line_end":33,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":22059,"byte_end":22066,"line_start":56,"line_end":56,"column_start":12,"column_end":19},"name":"rcv_msg","qualname":"<Socket>::rcv_msg","value":"fn (&self, buffer: &mut [u8], fds: &mut [RawFd]) -> NixResult<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Receive a single message from the socket","sig":null,"attributes":[{"value":"/ Receive a single message from the socket","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":21584,"byte_end":21628,"line_start":45,"line_end":45,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":21633,"byte_end":21636,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ Return the number of bytes received and the number of Fds received.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":21641,"byte_end":21712,"line_start":47,"line_end":47,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":21717,"byte_end":21720,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ Errors with `WouldBlock` is no message is available.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":21725,"byte_end":21781,"line_start":49,"line_end":49,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":21786,"byte_end":21789,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ A single socket message can contain several wayland messages.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":21794,"byte_end":21859,"line_start":51,"line_end":51,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":21864,"byte_end":21867,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ The `buffer` slice should be at least `MAX_BYTES_OUT` long and the `fds`","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":21872,"byte_end":21948,"line_start":53,"line_end":53,"column_start":5,"column_end":81}},{"value":"/ slice `MAX_FDS_OUT` long, otherwise some data of the received message may","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":21953,"byte_end":22030,"line_start":54,"line_end":54,"column_start":5,"column_end":82}},{"value":"/ be lost.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":22035,"byte_end":22047,"line_start":55,"line_end":55,"column_start":5,"column_end":17}}]},{"kind":"Struct","id":{"krate":0,"index":120},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":23276,"byte_end":23290,"line_start":106,"line_end":106,"column_start":12,"column_end":26},"name":"BufferedSocket","qualname":"::socket::BufferedSocket","value":"BufferedSocket {  }","parent":null,"children":[{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125}],"decl_id":null,"docs":" An adapter around a raw Socket that directly handles buffering and\n conversion from/to wayland messages\n","sig":null,"attributes":[{"value":"/ An adapter around a raw Socket that directly handles buffering and","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":23154,"byte_end":23224,"line_start":104,"line_end":104,"column_start":1,"column_end":71}},{"value":"/ conversion from/to wayland messages","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":23225,"byte_end":23264,"line_start":105,"line_end":105,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":23502,"byte_end":23505,"line_start":116,"line_end":116,"column_start":12,"column_end":15},"name":"new","qualname":"<BufferedSocket>::new","value":"fn (socket: Socket) -> BufferedSocket","parent":null,"children":[],"decl_id":null,"docs":" Wrap a Socket into a Buffered Socket\n","sig":null,"attributes":[{"value":"/ Wrap a Socket into a Buffered Socket","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":23450,"byte_end":23490,"line_start":115,"line_end":115,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":23974,"byte_end":23984,"line_start":127,"line_end":127,"column_start":12,"column_end":22},"name":"get_socket","qualname":"<BufferedSocket>::get_socket","value":"fn (&mut self) -> &mut Socket","parent":null,"children":[],"decl_id":null,"docs":" Get direct access to the underlying socket\n","sig":null,"attributes":[{"value":"/ Get direct access to the underlying socket","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":23916,"byte_end":23962,"line_start":126,"line_end":126,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":24182,"byte_end":24193,"line_start":134,"line_end":134,"column_start":12,"column_end":23},"name":"into_socket","qualname":"<BufferedSocket>::into_socket","value":"fn (self) -> Socket","parent":null,"children":[],"decl_id":null,"docs":" Retrieve ownership of the underlying Socket","sig":null,"attributes":[{"value":"/ Retrieve ownership of the underlying Socket","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":24049,"byte_end":24096,"line_start":131,"line_end":131,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":24101,"byte_end":24104,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ Any leftover content in the internal buffers will be lost","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":24109,"byte_end":24170,"line_start":133,"line_end":133,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":24316,"byte_end":24321,"line_start":139,"line_end":139,"column_start":12,"column_end":17},"name":"flush","qualname":"<BufferedSocket>::flush","value":"fn (&mut self) -> NixResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Flush the contents of the outgoing buffer into the socket\n","sig":null,"attributes":[{"value":"/ Flush the contents of the outgoing buffer into the socket","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":24243,"byte_end":24304,"line_start":138,"line_end":138,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":25930,"byte_end":25943,"line_start":185,"line_end":185,"column_start":12,"column_end":25},"name":"write_message","qualname":"<BufferedSocket>::write_message","value":"fn (&mut self, msg: &Message) -> NixResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Write a message to the outgoing buffer","sig":null,"attributes":[{"value":"/ Write a message to the outgoing buffer","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":25668,"byte_end":25710,"line_start":179,"line_end":179,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":25715,"byte_end":25718,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ This method may flush the internal buffer if necessary (if it is full).","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":25723,"byte_end":25798,"line_start":181,"line_end":181,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":25803,"byte_end":25806,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ If the message is too big to fit in the buffer, the error `Error::Sys(E2BIG)`","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":25811,"byte_end":25892,"line_start":183,"line_end":183,"column_start":5,"column_end":86}},{"value":"/ will be returned.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":25897,"byte_end":25918,"line_start":184,"line_end":184,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":26574,"byte_end":26595,"line_start":201,"line_end":201,"column_start":12,"column_end":33},"name":"fill_incoming_buffers","qualname":"<BufferedSocket>::fill_incoming_buffers","value":"fn (&mut self) -> NixResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Try to fill the incoming buffers of this socket, to prepare\n a new round of parsing.\n","sig":null,"attributes":[{"value":"/ Try to fill the incoming buffers of this socket, to prepare","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":26467,"byte_end":26530,"line_start":199,"line_end":199,"column_start":5,"column_end":68}},{"value":"/ a new round of parsing.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":26535,"byte_end":26562,"line_start":200,"line_end":200,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":28468,"byte_end":28484,"line_start":243,"line_end":243,"column_start":12,"column_end":28},"name":"read_one_message","qualname":"<BufferedSocket>::read_one_message","value":"fn <F> (&mut self, mut signature: F) -> Result<Message, MessageParseError>","parent":null,"children":[],"decl_id":null,"docs":" Read and deserialize a single message from the incoming buffers socket","sig":null,"attributes":[{"value":"/ Read and deserialize a single message from the incoming buffers socket","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":27566,"byte_end":27640,"line_start":228,"line_end":228,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":27645,"byte_end":27648,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ This method requires one closure that given an object id and an opcode,","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":27653,"byte_end":27728,"line_start":230,"line_end":230,"column_start":5,"column_end":80}},{"value":"/ must provide the signature of the associated request/event, in the form of","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":27733,"byte_end":27811,"line_start":231,"line_end":231,"column_start":5,"column_end":83}},{"value":"/ a `&'static [ArgumentType]`. If it returns `None`, meaning that","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":27816,"byte_end":27883,"line_start":232,"line_end":232,"column_start":5,"column_end":72}},{"value":"/ the couple object/opcode does not exist, an error will be returned.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":27888,"byte_end":27959,"line_start":233,"line_end":233,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":27964,"byte_end":27967,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ There are 3 possibilities of return value:","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":27972,"byte_end":28018,"line_start":235,"line_end":235,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":28023,"byte_end":28026,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ - `Ok(Ok(msg))`: no error occurred, this is the message","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":28031,"byte_end":28090,"line_start":237,"line_end":237,"column_start":5,"column_end":64}},{"value":"/ - `Ok(Err(e))`: either a malformed message was encountered or we need more data,","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":28095,"byte_end":28179,"line_start":238,"line_end":238,"column_start":5,"column_end":89}},{"value":"/    in the latter case you need to try calling `fill_incoming_buffers()`.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":28184,"byte_end":28260,"line_start":239,"line_end":239,"column_start":5,"column_end":81}},{"value":"/ - `Err(e)`: an I/O error occurred reading from the socked, details are in `e`","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":28265,"byte_end":28346,"line_start":240,"line_end":240,"column_start":5,"column_end":86}},{"value":"/   (this can be a \"wouldblock\" error, which just means that no message is available","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":28351,"byte_end":28437,"line_start":241,"line_end":241,"column_start":5,"column_end":91}},{"value":"/   to read)","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":28442,"byte_end":28456,"line_start":242,"line_end":242,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":31027,"byte_end":31040,"line_start":300,"line_end":300,"column_start":12,"column_end":25},"name":"read_messages","qualname":"<BufferedSocket>::read_messages","value":"fn <F1, F2> (&mut self, mut signature: F1, mut callback: F2) -> NixResult<Result<usize, MessageParseError>>","parent":null,"children":[],"decl_id":null,"docs":" Read and deserialize messages from the socket","sig":null,"attributes":[{"value":"/ Read and deserialize messages from the socket","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":29670,"byte_end":29719,"line_start":275,"line_end":275,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":29724,"byte_end":29727,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ This method requires two closures:","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":29732,"byte_end":29770,"line_start":277,"line_end":277,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":29775,"byte_end":29778,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ - The first one, given an object id and an opcode, must provide","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":29783,"byte_end":29850,"line_start":279,"line_end":279,"column_start":5,"column_end":72}},{"value":"/   the signature of the associated request/event, in the form of","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":29855,"byte_end":29922,"line_start":280,"line_end":280,"column_start":5,"column_end":72}},{"value":"/   a `&'static [ArgumentType]`. If it returns `None`, meaning that","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":29927,"byte_end":29996,"line_start":281,"line_end":281,"column_start":5,"column_end":74}},{"value":"/   the couple object/opcode does not exist, the parsing will be","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":30001,"byte_end":30067,"line_start":282,"line_end":282,"column_start":5,"column_end":71}},{"value":"/   prematurely interrupted and this method will return a","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":30072,"byte_end":30131,"line_start":283,"line_end":283,"column_start":5,"column_end":64}},{"value":"/   `MessageParseError::Malformed` error.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":30136,"byte_end":30179,"line_start":284,"line_end":284,"column_start":5,"column_end":48}},{"value":"/ - The second closure is charged to process the parsed message. If it","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":30184,"byte_end":30256,"line_start":285,"line_end":285,"column_start":5,"column_end":77}},{"value":"/   returns `false`, the iteration will be prematurely stopped.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":30261,"byte_end":30326,"line_start":286,"line_end":286,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":30331,"byte_end":30334,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ In both cases of early stopping, the remaining unused data will be left","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":30339,"byte_end":30414,"line_start":288,"line_end":288,"column_start":5,"column_end":80}},{"value":"/ in the buffers, and will start to be processed at the next call of this","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":30419,"byte_end":30494,"line_start":289,"line_end":289,"column_start":5,"column_end":80}},{"value":"/ method.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":30499,"byte_end":30510,"line_start":290,"line_end":290,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":30515,"byte_end":30518,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ There are 3 possibilities of return value:","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":30523,"byte_end":30569,"line_start":292,"line_end":292,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":30574,"byte_end":30577,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ - `Ok(Ok(n))`: no error occurred, `n` messages where processed","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":30582,"byte_end":30648,"line_start":294,"line_end":294,"column_start":5,"column_end":71}},{"value":"/ - `Ok(Err(MessageParseError::Malformed))`: a malformed message was encountered","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":30653,"byte_end":30735,"line_start":295,"line_end":295,"column_start":5,"column_end":87}},{"value":"/   (this is a protocol error and is supposed to be fatal to the connection).","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":30740,"byte_end":30819,"line_start":296,"line_end":296,"column_start":5,"column_end":84}},{"value":"/ - `Err(e)`: an I/O error occurred reading from the socked, details are in `e`","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":30824,"byte_end":30905,"line_start":297,"line_end":297,"column_start":5,"column_end":86}},{"value":"/   (this can be a \"wouldblock\" error, which just means that no message is available","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":30910,"byte_end":30996,"line_start":298,"line_end":298,"column_start":5,"column_end":91}},{"value":"/   to read)","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":31001,"byte_end":31015,"line_start":299,"line_end":299,"column_start":5,"column_end":19}}]},{"kind":"Mod","id":{"krate":0,"index":154},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"user_data","qualname":"::user_data","value":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","parent":null,"children":[{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":164},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":186},{"krate":0,"index":188},{"krate":0,"index":190},{"krate":0,"index":200},{"krate":0,"index":202}],"decl_id":null,"docs":" Various utilities used for other implementations\n","sig":null,"attributes":[{"value":"! Various utilities used for other implementations","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":42304,"byte_end":42356,"line_start":1,"line_end":1,"column_start":1,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":162},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":42620,"byte_end":42628,"line_start":13,"line_end":13,"column_start":12,"column_end":20},"name":"UserData","qualname":"::user_data::UserData","value":"UserData {  }","parent":null,"children":[{"krate":0,"index":163}],"decl_id":null,"docs":" A wrapper for user data, able to store any type, and correctly\n handling access from a wrong thread\n","sig":null,"attributes":[{"value":"/ A wrapper for user data, able to store any type, and correctly","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":42502,"byte_end":42568,"line_start":11,"line_end":11,"column_start":1,"column_end":67}},{"value":"/ handling access from a wrong thread","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":42569,"byte_end":42608,"line_start":12,"line_end":12,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":43086,"byte_end":43089,"line_start":29,"line_end":29,"column_start":18,"column_end":21},"name":"new","qualname":"<UserData>::new","value":"fn () -> UserData","parent":null,"children":[],"decl_id":null,"docs":" Create a new UserData instance\n","sig":null,"attributes":[{"value":"/ Create a new UserData instance","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":43034,"byte_end":43068,"line_start":28,"line_end":28,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":43339,"byte_end":43342,"line_start":37,"line_end":37,"column_start":12,"column_end":15},"name":"set","qualname":"<UserData>::set","value":"fn <T, F> (&self, f: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the UserData to a given value","sig":null,"attributes":[{"value":"/ Sets the UserData to a given value","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":43161,"byte_end":43199,"line_start":33,"line_end":33,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":43204,"byte_end":43207,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ The provided closure is called to init the UserData,","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":43212,"byte_end":43268,"line_start":35,"line_end":35,"column_start":5,"column_end":61}},{"value":"/ does nothing is the UserData had already been set.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":43273,"byte_end":43327,"line_start":36,"line_end":36,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":43741,"byte_end":43755,"line_start":47,"line_end":47,"column_start":12,"column_end":26},"name":"set_threadsafe","qualname":"<UserData>::set_threadsafe","value":"fn <T, F> (&self, f: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the UserData to a given threadsafe value","sig":null,"attributes":[{"value":"/ Sets the UserData to a given threadsafe value","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":43552,"byte_end":43601,"line_start":43,"line_end":43,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":43606,"byte_end":43609,"line_start":44,"line_end":44,"column_start":5,"column_end":8}},{"value":"/ The provided closure is called to init the UserData,","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":43614,"byte_end":43670,"line_start":45,"line_end":45,"column_start":5,"column_end":61}},{"value":"/ does nothing is the UserData had already been set.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":43675,"byte_end":43729,"line_start":46,"line_end":46,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":44259,"byte_end":44262,"line_start":58,"line_end":58,"column_start":12,"column_end":15},"name":"get","qualname":"<UserData>::get","value":"fn <T> (&self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to access the wrapped user data","sig":null,"attributes":[{"value":"/ Attempt to access the wrapped user data","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":43909,"byte_end":43952,"line_start":51,"line_end":51,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":43957,"byte_end":43960,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ Will return `None` if either:","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":43965,"byte_end":43998,"line_start":53,"line_end":53,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":44003,"byte_end":44006,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ - The requested type `T` does not match the type used for construction","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":44011,"byte_end":44085,"line_start":55,"line_end":55,"column_start":5,"column_end":79}},{"value":"/ - This `UserData` has been created using the non-threadsafe variant and access","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":44090,"byte_end":44172,"line_start":56,"line_end":56,"column_start":5,"column_end":87}},{"value":"/   is attempted from an other thread than the one it was created on","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":44177,"byte_end":44247,"line_start":57,"line_end":57,"column_start":5,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":188},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":45352,"byte_end":45363,"line_start":90,"line_end":90,"column_start":12,"column_end":23},"name":"UserDataMap","qualname":"::user_data::UserDataMap","value":"UserDataMap {  }","parent":null,"children":[{"krate":0,"index":189}],"decl_id":null,"docs":" A storage able to store several values of `UserData`\n of different types. It behaves similarly to a `TypeMap`.\n","sig":null,"attributes":[{"value":"/ A storage able to store several values of `UserData`","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":45223,"byte_end":45279,"line_start":88,"line_end":88,"column_start":1,"column_end":57}},{"value":"/ of different types. It behaves similarly to a `TypeMap`.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":45280,"byte_end":45340,"line_start":89,"line_end":89,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":191},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":45456,"byte_end":45459,"line_start":96,"line_end":96,"column_start":12,"column_end":15},"name":"new","qualname":"<UserDataMap>::new","value":"fn () -> UserDataMap","parent":null,"children":[],"decl_id":null,"docs":" Create a new map\n","sig":null,"attributes":[{"value":"/ Create a new map","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":45424,"byte_end":45444,"line_start":95,"line_end":95,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":45740,"byte_end":45743,"line_start":104,"line_end":104,"column_start":12,"column_end":15},"name":"get","qualname":"<UserDataMap>::get","value":"fn <T> (&self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to access the wrapped user data of a given type","sig":null,"attributes":[{"value":"/ Attempt to access the wrapped user data of a given type","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":45538,"byte_end":45597,"line_start":100,"line_end":100,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":45602,"byte_end":45605,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ Will return `None` if no value of type `T` is stored in this `UserDataMap`","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":45610,"byte_end":45688,"line_start":102,"line_end":102,"column_start":5,"column_end":83}},{"value":"/ and accessible from this thread","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":45693,"byte_end":45728,"line_start":103,"line_end":103,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":46456,"byte_end":46473,"line_start":122,"line_end":122,"column_start":12,"column_end":29},"name":"insert_if_missing","qualname":"<UserDataMap>::insert_if_missing","value":"fn <T, F> (&self, init: F) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Insert a value in the map if it is not already there","sig":null,"attributes":[{"value":"/ Insert a value in the map if it is not already there","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":45953,"byte_end":46009,"line_start":113,"line_end":113,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":46014,"byte_end":46017,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ This is the non-threadsafe variant, the type you insert don't have to be","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":46022,"byte_end":46098,"line_start":115,"line_end":115,"column_start":5,"column_end":81}},{"value":"/ threadsafe, but they will not be visible from other threads (even if they are","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":46103,"byte_end":46184,"line_start":116,"line_end":116,"column_start":5,"column_end":86}},{"value":"/ actually threadsafe).","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":46189,"byte_end":46214,"line_start":117,"line_end":117,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":46219,"byte_end":46222,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ If the value does not already exists, the closure is called to create it and","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":46227,"byte_end":46307,"line_start":119,"line_end":119,"column_start":5,"column_end":85}},{"value":"/ this function returns `true`. If the value already exists, the closure is not","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":46312,"byte_end":46393,"line_start":120,"line_end":120,"column_start":5,"column_end":86}},{"value":"/ called, and this function returns `false`.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":46398,"byte_end":46444,"line_start":121,"line_end":121,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":47152,"byte_end":47180,"line_start":140,"line_end":140,"column_start":12,"column_end":40},"name":"insert_if_missing_threadsafe","qualname":"<UserDataMap>::insert_if_missing_threadsafe","value":"fn <T, F> (&self, init: F) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Insert a value in the map if it is not already there","sig":null,"attributes":[{"value":"/ Insert a value in the map if it is not already there","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":46721,"byte_end":46777,"line_start":132,"line_end":132,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":46782,"byte_end":46785,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ This is the threadsafe variant, the type you insert must be threadsafe and will","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":46790,"byte_end":46873,"line_start":134,"line_end":134,"column_start":5,"column_end":88}},{"value":"/ be visible from all threads.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":46878,"byte_end":46910,"line_start":135,"line_end":135,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":46915,"byte_end":46918,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ If the value does not already exists, the closure is called to create it and","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":46923,"byte_end":47003,"line_start":137,"line_end":137,"column_start":5,"column_end":85}},{"value":"/ this function returns `true`. If the value already exists, the closure is not","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":47008,"byte_end":47089,"line_start":138,"line_end":138,"column_start":5,"column_end":86}},{"value":"/ called, and this function returns `false`.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":47094,"byte_end":47140,"line_start":139,"line_end":139,"column_start":5,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":384},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":48115,"byte_end":48125,"line_start":181,"line_end":181,"column_start":16,"column_end":26},"name":"AppendList","qualname":"::user_data::list::AppendList","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":48721,"byte_end":48724,"line_start":202,"line_end":202,"column_start":16,"column_end":19},"name":"new","qualname":"<AppendList<T>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":48800,"byte_end":48806,"line_start":206,"line_end":206,"column_start":16,"column_end":22},"name":"append","qualname":"<AppendList<T>>::append","value":"fn (&self, value: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":219},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":49564,"byte_end":49575,"line_start":231,"line_end":231,"column_start":16,"column_end":27},"name":"append_list","qualname":"<AppendList<T>>::append_list","value":"fn (&self, other: AppendList<T>) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":49761,"byte_end":49765,"line_start":237,"line_end":237,"column_start":16,"column_end":20},"name":"iter","qualname":"<AppendList<T>>::iter","value":"fn (&self) -> AppendListIterator<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":221},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":49866,"byte_end":49874,"line_start":241,"line_end":241,"column_start":16,"column_end":24},"name":"iter_mut","qualname":"<AppendList<T>>::iter_mut","value":"fn (&mut self) -> AppendListMutIterator<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":391},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":50672,"byte_end":50690,"line_start":271,"line_end":271,"column_start":16,"column_end":34},"name":"AppendListIterator","qualname":"::user_data::list::AppendListIterator","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":400},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":51177,"byte_end":51198,"line_start":290,"line_end":290,"column_start":16,"column_end":37},"name":"AppendListMutIterator","qualname":"::user_data::list::AppendListMutIterator","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":247},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"wire","qualname":"::wire","value":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","parent":null,"children":[{"krate":0,"index":248},{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":254},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":409},{"krate":0,"index":418},{"krate":0,"index":416},{"krate":0,"index":414},{"krate":0,"index":419},{"krate":0,"index":443},{"krate":0,"index":441},{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":436},{"krate":0,"index":444},{"krate":0,"index":475},{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":469},{"krate":0,"index":259},{"krate":0,"index":261},{"krate":0,"index":477},{"krate":0,"index":488},{"krate":0,"index":486},{"krate":0,"index":482},{"krate":0,"index":483},{"krate":0,"index":490},{"krate":0,"index":498},{"krate":0,"index":496},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":500},{"krate":0,"index":509},{"krate":0,"index":507},{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":269},{"krate":0,"index":284},{"krate":0,"index":288},{"krate":0,"index":290},{"krate":0,"index":294}],"decl_id":null,"docs":" Types and routines used to manipulate arguments from the wire format\n","sig":null,"attributes":[{"value":"! Types and routines used to manipulate arguments from the wire format","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":52014,"byte_end":52086,"line_start":1,"line_end":1,"column_start":1,"column_end":73}}]},{"kind":"Struct","id":{"krate":0,"index":409},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":52798,"byte_end":52809,"line_start":22,"line_end":22,"column_start":12,"column_end":23},"name":"MessageDesc","qualname":"::wire::MessageDesc","value":"MessageDesc { name, signature, since, destructor }","parent":null,"children":[{"krate":0,"index":410},{"krate":0,"index":411},{"krate":0,"index":412},{"krate":0,"index":413}],"decl_id":null,"docs":" Wire metadata of a given message\n","sig":null,"attributes":[{"value":"/ Wire metadata of a given message","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":52720,"byte_end":52756,"line_start":20,"line_end":20,"column_start":1,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":410},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":52849,"byte_end":52853,"line_start":24,"line_end":24,"column_start":9,"column_end":13},"name":"name","qualname":"::wire::MessageDesc::name","value":"&'static str","parent":{"krate":0,"index":409},"children":[],"decl_id":null,"docs":" Name of this message\n","sig":null,"attributes":[{"value":"/ Name of this message","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":52816,"byte_end":52840,"line_start":23,"line_end":23,"column_start":5,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":411},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":52910,"byte_end":52919,"line_start":26,"line_end":26,"column_start":9,"column_end":18},"name":"signature","qualname":"::wire::MessageDesc::signature","value":"&'static [wire::ArgumentType]","parent":{"krate":0,"index":409},"children":[],"decl_id":null,"docs":" Signature of the message\n","sig":null,"attributes":[{"value":"/ Signature of the message","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":52873,"byte_end":52901,"line_start":25,"line_end":25,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":412},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":53004,"byte_end":53009,"line_start":28,"line_end":28,"column_start":9,"column_end":14},"name":"since","qualname":"::wire::MessageDesc::since","value":"u32","parent":{"krate":0,"index":409},"children":[],"decl_id":null,"docs":" Minimum required version of the interface\n","sig":null,"attributes":[{"value":"/ Minimum required version of the interface","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":52950,"byte_end":52995,"line_start":27,"line_end":27,"column_start":5,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":413},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":53069,"byte_end":53079,"line_start":30,"line_end":30,"column_start":9,"column_end":19},"name":"destructor","qualname":"::wire::MessageDesc::destructor","value":"bool","parent":{"krate":0,"index":409},"children":[],"decl_id":null,"docs":" Whether this message is a destructor\n","sig":null,"attributes":[{"value":"/ Whether this message is a destructor","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":53020,"byte_end":53060,"line_start":29,"line_end":29,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":420},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":53233,"byte_end":53236,"line_start":37,"line_end":37,"column_start":5,"column_end":8},"name":"Int","qualname":"::wire::ArgumentType::Int","value":"ArgumentType::Int","parent":{"krate":0,"index":419},"children":[],"decl_id":null,"docs":" i32\n","sig":null,"attributes":[{"value":"/ i32","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":53221,"byte_end":53228,"line_start":36,"line_end":36,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":422},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":53254,"byte_end":53258,"line_start":39,"line_end":39,"column_start":5,"column_end":9},"name":"Uint","qualname":"::wire::ArgumentType::Uint","value":"ArgumentType::Uint","parent":{"krate":0,"index":419},"children":[],"decl_id":null,"docs":" u32\n","sig":null,"attributes":[{"value":"/ u32","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":53242,"byte_end":53249,"line_start":38,"line_end":38,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":424},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":53301,"byte_end":53306,"line_start":41,"line_end":41,"column_start":5,"column_end":10},"name":"Fixed","qualname":"::wire::ArgumentType::Fixed","value":"ArgumentType::Fixed","parent":{"krate":0,"index":419},"children":[],"decl_id":null,"docs":" fixed point, 1/256 precision\n","sig":null,"attributes":[{"value":"/ fixed point, 1/256 precision","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":53264,"byte_end":53296,"line_start":40,"line_end":40,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":426},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":53328,"byte_end":53331,"line_start":43,"line_end":43,"column_start":5,"column_end":8},"name":"Str","qualname":"::wire::ArgumentType::Str","value":"ArgumentType::Str","parent":{"krate":0,"index":419},"children":[],"decl_id":null,"docs":" CString\n","sig":null,"attributes":[{"value":"/ CString","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":53312,"byte_end":53323,"line_start":42,"line_end":42,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":428},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":53368,"byte_end":53374,"line_start":45,"line_end":45,"column_start":5,"column_end":11},"name":"Object","qualname":"::wire::ArgumentType::Object","value":"ArgumentType::Object","parent":{"krate":0,"index":419},"children":[],"decl_id":null,"docs":" id of a wayland object\n","sig":null,"attributes":[{"value":"/ id of a wayland object","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":53337,"byte_end":53363,"line_start":44,"line_end":44,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":430},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":53425,"byte_end":53430,"line_start":47,"line_end":47,"column_start":5,"column_end":10},"name":"NewId","qualname":"::wire::ArgumentType::NewId","value":"ArgumentType::NewId","parent":{"krate":0,"index":419},"children":[],"decl_id":null,"docs":" id of a newly created wayland object\n","sig":null,"attributes":[{"value":"/ id of a newly created wayland object","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":53380,"byte_end":53420,"line_start":46,"line_end":46,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":432},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":53452,"byte_end":53457,"line_start":49,"line_end":49,"column_start":5,"column_end":10},"name":"Array","qualname":"::wire::ArgumentType::Array","value":"ArgumentType::Array","parent":{"krate":0,"index":419},"children":[],"decl_id":null,"docs":" Vec<u8>\n","sig":null,"attributes":[{"value":"/ Vec<u8>","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":53436,"byte_end":53447,"line_start":48,"line_end":48,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":434},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":53477,"byte_end":53479,"line_start":51,"line_end":51,"column_start":5,"column_end":7},"name":"Fd","qualname":"::wire::ArgumentType::Fd","value":"ArgumentType::Fd","parent":{"krate":0,"index":419},"children":[],"decl_id":null,"docs":" RawFd\n","sig":null,"attributes":[{"value":"/ RawFd","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":53463,"byte_end":53472,"line_start":50,"line_end":50,"column_start":5,"column_end":14}}]},{"kind":"Enum","id":{"krate":0,"index":419},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":53202,"byte_end":53214,"line_start":35,"line_end":35,"column_start":10,"column_end":22},"name":"ArgumentType","qualname":"::wire::ArgumentType","value":"ArgumentType::{Int, Uint, Fixed, Str, Object, NewId, Array, Fd}","parent":null,"children":[{"krate":0,"index":420},{"krate":0,"index":422},{"krate":0,"index":424},{"krate":0,"index":426},{"krate":0,"index":428},{"krate":0,"index":430},{"krate":0,"index":432},{"krate":0,"index":434}],"decl_id":null,"docs":" Enum of possible argument types as recognized by the wire\n","sig":null,"attributes":[{"value":"/ Enum of possible argument types as recognized by the wire","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":53090,"byte_end":53151,"line_start":33,"line_end":33,"column_start":1,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":445},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":53655,"byte_end":53658,"line_start":59,"line_end":59,"column_start":5,"column_end":8},"name":"Int","qualname":"::wire::Argument::Int","value":"Argument::Int(i32)","parent":{"krate":0,"index":444},"children":[],"decl_id":null,"docs":" i32\n","sig":null,"attributes":[{"value":"/ i32","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":53643,"byte_end":53650,"line_start":58,"line_end":58,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":448},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":53681,"byte_end":53685,"line_start":61,"line_end":61,"column_start":5,"column_end":9},"name":"Uint","qualname":"::wire::Argument::Uint","value":"Argument::Uint(u32)","parent":{"krate":0,"index":444},"children":[],"decl_id":null,"docs":" u32\n","sig":null,"attributes":[{"value":"/ u32","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":53669,"byte_end":53676,"line_start":60,"line_end":60,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":451},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":53733,"byte_end":53738,"line_start":63,"line_end":63,"column_start":5,"column_end":10},"name":"Fixed","qualname":"::wire::Argument::Fixed","value":"Argument::Fixed(i32)","parent":{"krate":0,"index":444},"children":[],"decl_id":null,"docs":" fixed point, 1/256 precision\n","sig":null,"attributes":[{"value":"/ fixed point, 1/256 precision","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":53696,"byte_end":53728,"line_start":62,"line_end":62,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":454},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":53938,"byte_end":53941,"line_start":68,"line_end":68,"column_start":5,"column_end":8},"name":"Str","qualname":"::wire::Argument::Str","value":"Argument::Str(Box<CString>)","parent":{"krate":0,"index":444},"children":[],"decl_id":null,"docs":" CString","sig":null,"attributes":[{"value":"/ CString","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":53749,"byte_end":53760,"line_start":64,"line_end":64,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":53765,"byte_end":53768,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ The value is boxed to reduce the stack size of Argument. The performance","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":53773,"byte_end":53849,"line_start":66,"line_end":66,"column_start":5,"column_end":81}},{"value":"/ impact is negligible as `string` arguments are pretty rare in the protocol.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":53854,"byte_end":53933,"line_start":67,"line_end":67,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":457},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":53992,"byte_end":53998,"line_start":70,"line_end":70,"column_start":5,"column_end":11},"name":"Object","qualname":"::wire::Argument::Object","value":"Argument::Object(u32)","parent":{"krate":0,"index":444},"children":[],"decl_id":null,"docs":" id of a wayland object\n","sig":null,"attributes":[{"value":"/ id of a wayland object","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":53961,"byte_end":53987,"line_start":69,"line_end":69,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":460},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":54054,"byte_end":54059,"line_start":72,"line_end":72,"column_start":5,"column_end":10},"name":"NewId","qualname":"::wire::Argument::NewId","value":"Argument::NewId(u32)","parent":{"krate":0,"index":444},"children":[],"decl_id":null,"docs":" id of a newly created wayland object\n","sig":null,"attributes":[{"value":"/ id of a newly created wayland object","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":54009,"byte_end":54049,"line_start":71,"line_end":71,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":463},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":54258,"byte_end":54263,"line_start":77,"line_end":77,"column_start":5,"column_end":10},"name":"Array","qualname":"::wire::Argument::Array","value":"Argument::Array(Box<Vec<u8>>)","parent":{"krate":0,"index":444},"children":[],"decl_id":null,"docs":" Vec<u8>","sig":null,"attributes":[{"value":"/ Vec<u8>","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":54070,"byte_end":54081,"line_start":73,"line_end":73,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":54086,"byte_end":54089,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ The value is boxed to reduce the stack size of Argument. The performance","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":54094,"byte_end":54170,"line_start":75,"line_end":75,"column_start":5,"column_end":81}},{"value":"/ impact is negligible as `array` arguments are pretty rare in the protocol.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":54175,"byte_end":54253,"line_start":76,"line_end":76,"column_start":5,"column_end":83}}]},{"kind":"TupleVariant","id":{"krate":0,"index":466},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":54297,"byte_end":54299,"line_start":79,"line_end":79,"column_start":5,"column_end":7},"name":"Fd","qualname":"::wire::Argument::Fd","value":"Argument::Fd(RawFd)","parent":{"krate":0,"index":444},"children":[],"decl_id":null,"docs":" RawFd\n","sig":null,"attributes":[{"value":"/ RawFd","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":54283,"byte_end":54292,"line_start":78,"line_end":78,"column_start":5,"column_end":14}}]},{"kind":"Enum","id":{"krate":0,"index":444},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":53628,"byte_end":53636,"line_start":57,"line_end":57,"column_start":10,"column_end":18},"name":"Argument","qualname":"::wire::Argument","value":"Argument::{Int, Uint, Fixed, Str, Object, NewId, Array, Fd}","parent":null,"children":[{"krate":0,"index":445},{"krate":0,"index":448},{"krate":0,"index":451},{"krate":0,"index":454},{"krate":0,"index":457},{"krate":0,"index":460},{"krate":0,"index":463},{"krate":0,"index":466}],"decl_id":null,"docs":" Enum of possible argument as recognized by the wire, including values\n","sig":null,"attributes":[{"value":"/ Enum of possible argument as recognized by the wire, including values","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":53484,"byte_end":53557,"line_start":54,"line_end":54,"column_start":1,"column_end":74}},{"value":"allow(clippy :: box_vec)","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":53593,"byte_end":53618,"line_start":56,"line_end":56,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":54393,"byte_end":54401,"line_start":84,"line_end":84,"column_start":12,"column_end":20},"name":"get_type","qualname":"<Argument>::get_type","value":"fn (&self) -> ArgumentType","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the type of a given argument instance\n","sig":null,"attributes":[{"value":"/ Retrieve the type of a given argument instance","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":54331,"byte_end":54381,"line_start":83,"line_end":83,"column_start":5,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":477},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":55603,"byte_end":55610,"line_start":115,"line_end":115,"column_start":12,"column_end":19},"name":"Message","qualname":"::wire::Message","value":"Message { sender_id, opcode, args }","parent":null,"children":[{"krate":0,"index":478},{"krate":0,"index":479},{"krate":0,"index":480}],"decl_id":null,"docs":" A wire message\n","sig":null,"attributes":[{"value":"/ A wire message","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":55538,"byte_end":55556,"line_start":113,"line_end":113,"column_start":1,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":478},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":55667,"byte_end":55676,"line_start":117,"line_end":117,"column_start":9,"column_end":18},"name":"sender_id","qualname":"::wire::Message::sender_id","value":"u32","parent":{"krate":0,"index":477},"children":[],"decl_id":null,"docs":" ID of the object sending this message\n","sig":null,"attributes":[{"value":"/ ID of the object sending this message","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":55617,"byte_end":55658,"line_start":116,"line_end":116,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":479},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":55721,"byte_end":55727,"line_start":119,"line_end":119,"column_start":9,"column_end":15},"name":"opcode","qualname":"::wire::Message::opcode","value":"u16","parent":{"krate":0,"index":477},"children":[],"decl_id":null,"docs":" Opcode of the message\n","sig":null,"attributes":[{"value":"/ Opcode of the message","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":55687,"byte_end":55712,"line_start":118,"line_end":118,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":480},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":55775,"byte_end":55779,"line_start":121,"line_end":121,"column_start":9,"column_end":13},"name":"args","qualname":"::wire::Message::args","value":"smallvec::SmallVec<[wire::Argument; _]>","parent":{"krate":0,"index":477},"children":[],"decl_id":null,"docs":" Arguments of the message\n","sig":null,"attributes":[{"value":"/ Arguments of the message","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":55738,"byte_end":55766,"line_start":120,"line_end":120,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":491},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":56005,"byte_end":56019,"line_start":128,"line_end":128,"column_start":5,"column_end":19},"name":"BufferTooSmall","qualname":"::wire::MessageWriteError::BufferTooSmall","value":"MessageWriteError::BufferTooSmall","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":" The buffer is too small to hold the message contents\n","sig":null,"attributes":[{"value":"/ The buffer is too small to hold the message contents","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":55944,"byte_end":56000,"line_start":127,"line_end":127,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":493},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":56084,"byte_end":56095,"line_start":130,"line_end":130,"column_start":5,"column_end":16},"name":"DupFdFailed","qualname":"::wire::MessageWriteError::DupFdFailed","value":"MessageWriteError::DupFdFailed(::nix::Error)","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":" The message contains a FD that could not be dup-ed\n","sig":null,"attributes":[{"value":"/ The message contains a FD that could not be dup-ed","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":56025,"byte_end":56079,"line_start":129,"line_end":129,"column_start":5,"column_end":59}}]},{"kind":"Enum","id":{"krate":0,"index":490},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":55920,"byte_end":55937,"line_start":126,"line_end":126,"column_start":10,"column_end":27},"name":"MessageWriteError","qualname":"::wire::MessageWriteError","value":"MessageWriteError::{BufferTooSmall, DupFdFailed}","parent":null,"children":[{"krate":0,"index":491},{"krate":0,"index":493}],"decl_id":null,"docs":" Error generated when trying to serialize a message into buffers\n","sig":null,"attributes":[{"value":"/ Error generated when trying to serialize a message into buffers","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":55819,"byte_end":55886,"line_start":124,"line_end":124,"column_start":1,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":501},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":56842,"byte_end":56851,"line_start":152,"line_end":152,"column_start":5,"column_end":14},"name":"MissingFD","qualname":"::wire::MessageParseError::MissingFD","value":"MessageParseError::MissingFD","parent":{"krate":0,"index":500},"children":[],"decl_id":null,"docs":" The message references a FD but the buffer FD is empty\n","sig":null,"attributes":[{"value":"/ The message references a FD but the buffer FD is empty","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":56779,"byte_end":56837,"line_start":151,"line_end":151,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":503},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":56912,"byte_end":56923,"line_start":154,"line_end":154,"column_start":5,"column_end":16},"name":"MissingData","qualname":"::wire::MessageParseError::MissingData","value":"MessageParseError::MissingData","parent":{"krate":0,"index":500},"children":[],"decl_id":null,"docs":" More data is needed to deserialize the message\n","sig":null,"attributes":[{"value":"/ More data is needed to deserialize the message","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":56857,"byte_end":56907,"line_start":153,"line_end":153,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":505},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":56983,"byte_end":56992,"line_start":156,"line_end":156,"column_start":5,"column_end":14},"name":"Malformed","qualname":"::wire::MessageParseError::Malformed","value":"MessageParseError::Malformed","parent":{"krate":0,"index":500},"children":[],"decl_id":null,"docs":" The message is malformed and cannot be parsed\n","sig":null,"attributes":[{"value":"/ The message is malformed and cannot be parsed","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":56929,"byte_end":56978,"line_start":155,"line_end":155,"column_start":5,"column_end":54}}]},{"kind":"Enum","id":{"krate":0,"index":500},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":56755,"byte_end":56772,"line_start":150,"line_end":150,"column_start":10,"column_end":27},"name":"MessageParseError","qualname":"::wire::MessageParseError","value":"MessageParseError::{MissingFD, MissingData, Malformed}","parent":null,"children":[{"krate":0,"index":501},{"krate":0,"index":503},{"krate":0,"index":505}],"decl_id":null,"docs":" Error generated when trying to deserialize a message from buffers\n","sig":null,"attributes":[{"value":"/ Error generated when trying to deserialize a message from buffers","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":56652,"byte_end":56721,"line_start":148,"line_end":148,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":57875,"byte_end":57891,"line_start":183,"line_end":183,"column_start":12,"column_end":28},"name":"write_to_buffers","qualname":"<Message>::write_to_buffers","value":"fn <'a, 'b> (&self, payload: &'a mut [u32], mut fds: &'b mut [RawFd]) -> Result<(usize, usize), MessageWriteError>","parent":null,"children":[],"decl_id":null,"docs":" Serialize the contents of this message into provided buffers","sig":null,"attributes":[{"value":"/ Serialize the contents of this message into provided buffers","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":57661,"byte_end":57725,"line_start":178,"line_end":178,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":57730,"byte_end":57733,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ Returns the number of elements written in each buffer","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":57738,"byte_end":57795,"line_start":180,"line_end":180,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":57800,"byte_end":57803,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ Any serialized Fd will be `dup()`-ed in the process","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":57808,"byte_end":57863,"line_start":182,"line_end":182,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":61694,"byte_end":61702,"line_start":274,"line_end":274,"column_start":12,"column_end":20},"name":"from_raw","qualname":"<Message>::from_raw","value":"fn <'a, 'b> (raw: &'a [u32], signature: &[ArgumentType], fds: &'b [RawFd]) -> Result<(Message, &'a [u32], &'b [RawFd]), MessageParseError>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to parse a single wayland message with the given signature.","sig":null,"attributes":[{"value":"/ Attempts to parse a single wayland message with the given signature.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":61326,"byte_end":61398,"line_start":267,"line_end":267,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":61403,"byte_end":61406,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ If the buffers contains several messages, only the first one will be parsed,","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":61411,"byte_end":61491,"line_start":269,"line_end":269,"column_start":5,"column_end":85}},{"value":"/ and the unused tail of the buffers is returned. If a single message was present,","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":61496,"byte_end":61580,"line_start":270,"line_end":270,"column_start":5,"column_end":89}},{"value":"/ the returned slices should thus be empty.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":61585,"byte_end":61630,"line_start":271,"line_end":271,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":61635,"byte_end":61638,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ Errors if the message is malformed.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":61643,"byte_end":61682,"line_start":273,"line_end":273,"column_start":5,"column_end":44}}]},{"kind":"Function","id":{"krate":0,"index":284},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":65248,"byte_end":65262,"line_start":360,"line_end":360,"column_start":8,"column_end":22},"name":"dup_fd_cloexec","qualname":"::wire::dup_fd_cloexec","value":"fn (fd: RawFd) -> NixResult<RawFd>","parent":null,"children":[],"decl_id":null,"docs":" Duplicate a `RawFd` and set the CLOEXEC flag on the copy\n","sig":null,"attributes":[{"value":"/ Duplicate a `RawFd` and set the CLOEXEC flag on the copy","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":65180,"byte_end":65240,"line_start":359,"line_end":359,"column_start":1,"column_end":61}}]},{"kind":"Trait","id":{"krate":0,"index":298},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":1279,"byte_end":1291,"line_start":40,"line_end":40,"column_start":11,"column_end":23},"name":"MessageGroup","qualname":"::MessageGroup","value":"MessageGroup: Sized","parent":null,"children":[{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":309}],"decl_id":null,"docs":" A group of messages","sig":null,"attributes":[{"value":"/ A group of messages","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":984,"byte_end":1007,"line_start":33,"line_end":33,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":1008,"byte_end":1011,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ This represents a group of message that can be serialized on the protocol wire.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":1012,"byte_end":1095,"line_start":35,"line_end":35,"column_start":1,"column_end":84}},{"value":"/ Typically the set of events or requests of a single interface.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":1096,"byte_end":1162,"line_start":36,"line_end":36,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":1163,"byte_end":1166,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ Implementations of this trait are supposed to be","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":1167,"byte_end":1219,"line_start":38,"line_end":38,"column_start":1,"column_end":53}},{"value":"/ generated using the `wayland-scanner` crate.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":1220,"byte_end":1268,"line_start":39,"line_end":39,"column_start":1,"column_end":49}}]},{"kind":"Const","id":{"krate":0,"index":299},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":1360,"byte_end":1368,"line_start":42,"line_end":42,"column_start":11,"column_end":19},"name":"MESSAGES","qualname":"::MessageGroup::MESSAGES","value":"&'static [wire::MessageDesc]","parent":{"krate":0,"index":298},"children":[],"decl_id":null,"docs":" Wire representation of this MessageGroup\n","sig":null,"attributes":[{"value":"/ Wire representation of this MessageGroup","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":1305,"byte_end":1349,"line_start":41,"line_end":41,"column_start":5,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":300},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":1541,"byte_end":1544,"line_start":45,"line_end":45,"column_start":10,"column_end":13},"name":"Map","qualname":"::MessageGroup::Map","value":"type Map;","parent":{"krate":0,"index":298},"children":[],"decl_id":null,"docs":" The wrapper type for ObjectMap allowing the mapping of Object and\n NewId arguments to the object map during parsing.\n","sig":null,"attributes":[{"value":"/ The wrapper type for ObjectMap allowing the mapping of Object and","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":1404,"byte_end":1473,"line_start":43,"line_end":43,"column_start":5,"column_end":74}},{"value":"/ NewId arguments to the object map during parsing.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":1478,"byte_end":1531,"line_start":44,"line_end":44,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":301},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":1588,"byte_end":1594,"line_start":47,"line_end":47,"column_start":8,"column_end":14},"name":"opcode","qualname":"::MessageGroup::opcode","value":"fn (&self) -> u16","parent":{"krate":0,"index":298},"children":[],"decl_id":null,"docs":" The opcode of this message\n","sig":null,"attributes":[{"value":"/ The opcode of this message","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":1550,"byte_end":1580,"line_start":46,"line_end":46,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":1756,"byte_end":1769,"line_start":51,"line_end":51,"column_start":8,"column_end":21},"name":"is_destructor","qualname":"::MessageGroup::is_destructor","value":"fn (&self) -> bool","parent":{"krate":0,"index":298},"children":[],"decl_id":null,"docs":" Whether this message is a destructor","sig":null,"attributes":[{"value":"/ Whether this message is a destructor","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":1614,"byte_end":1654,"line_start":48,"line_end":48,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":1659,"byte_end":1662,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ If it is, once send or receive the associated object cannot be used any more.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":1667,"byte_end":1748,"line_start":50,"line_end":50,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":303},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":1858,"byte_end":1863,"line_start":53,"line_end":53,"column_start":8,"column_end":13},"name":"since","qualname":"::MessageGroup::since","value":"fn (&self) -> u32","parent":{"krate":0,"index":298},"children":[],"decl_id":null,"docs":" The minimal object version for which this message exists\n","sig":null,"attributes":[{"value":"/ The minimal object version for which this message exists","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":1790,"byte_end":1850,"line_start":52,"line_end":52,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":1958,"byte_end":1963,"line_start":55,"line_end":55,"column_start":8,"column_end":13},"name":"child","qualname":"::MessageGroup::child","value":"fn <Meta> (opcode: u16, version: u32, meta: &Meta) -> Option<crate::map::Object<Meta>>","parent":{"krate":0,"index":298},"children":[],"decl_id":null,"docs":" Retrieve the child `Object` associated with this message if any\n","sig":null,"attributes":[{"value":"/ Retrieve the child `Object` associated with this message if any","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":1883,"byte_end":1950,"line_start":54,"line_end":54,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":2168,"byte_end":2176,"line_start":61,"line_end":61,"column_start":8,"column_end":16},"name":"from_raw","qualname":"::MessageGroup::from_raw","value":"fn (msg: wire::Message, map: &mut Self::Map) -> Result<Self, ()>","parent":{"krate":0,"index":298},"children":[],"decl_id":null,"docs":" Construct a message from its raw representation\n","sig":null,"attributes":[{"value":"/ Construct a message from its raw representation","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":2109,"byte_end":2160,"line_start":60,"line_end":60,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":2300,"byte_end":2308,"line_start":63,"line_end":63,"column_start":8,"column_end":16},"name":"into_raw","qualname":"::MessageGroup::into_raw","value":"fn (self, send_id: u32) -> wire::Message","parent":{"krate":0,"index":298},"children":[],"decl_id":null,"docs":" Turn this message into its raw representation\n","sig":null,"attributes":[{"value":"/ Turn this message into its raw representation","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":2243,"byte_end":2292,"line_start":62,"line_end":62,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":2569,"byte_end":2579,"line_start":70,"line_end":70,"column_start":15,"column_end":25},"name":"from_raw_c","qualname":"::MessageGroup::from_raw_c","value":"fn (obj: *mut c_void, opcode: u32, args: *const syscom::wl_argument) -> Result<Self, ()>","parent":{"krate":0,"index":298},"children":[],"decl_id":null,"docs":" Construct a message of this group from its C representation","sig":null,"attributes":[{"value":"/ Construct a message of this group from its C representation","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":2351,"byte_end":2414,"line_start":64,"line_end":64,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":2419,"byte_end":2422,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":2427,"byte_end":2439,"line_start":66,"line_end":66,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":2444,"byte_end":2447,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ The pointers provided to this function must all be valid pointers from","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":2452,"byte_end":2526,"line_start":68,"line_end":68,"column_start":5,"column_end":79}},{"value":"/ `libwayland-client`","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":2531,"byte_end":2554,"line_start":69,"line_end":69,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":309},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":2859,"byte_end":2870,"line_start":79,"line_end":79,"column_start":8,"column_end":19},"name":"as_raw_c_in","qualname":"::MessageGroup::as_raw_c_in","value":"fn <F, T> (self, f: F) -> T","parent":{"krate":0,"index":298},"children":[],"decl_id":null,"docs":" Build a C representation of this message","sig":null,"attributes":[{"value":"/ Build a C representation of this message","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":2701,"byte_end":2745,"line_start":75,"line_end":75,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":2750,"byte_end":2753,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ It can only be accessed from the provided closure, and this consumes","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":2758,"byte_end":2830,"line_start":77,"line_end":77,"column_start":5,"column_end":77}},{"value":"/ the message.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":2835,"byte_end":2851,"line_start":78,"line_end":78,"column_start":5,"column_end":21}}]},{"kind":"Trait","id":{"krate":0,"index":312},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":3123,"byte_end":3132,"line_start":88,"line_end":88,"column_start":11,"column_end":20},"name":"Interface","qualname":"::Interface","value":"Interface: 'static","parent":null,"children":[{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":317}],"decl_id":null,"docs":" The description of a wayland interface","sig":null,"attributes":[{"value":"/ The description of a wayland interface","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":2964,"byte_end":3006,"line_start":84,"line_end":84,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":3007,"byte_end":3010,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ Implementations of this trait are supposed to be","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":3011,"byte_end":3063,"line_start":86,"line_end":86,"column_start":1,"column_end":53}},{"value":"/ generated using the `wayland-scanner` crate.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":3064,"byte_end":3112,"line_start":87,"line_end":87,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":313},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":3274,"byte_end":3281,"line_start":92,"line_end":92,"column_start":10,"column_end":17},"name":"Request","qualname":"::Interface::Request","value":"type Request: MessageGroup + 'static;","parent":{"krate":0,"index":312},"children":[],"decl_id":null,"docs":" Set of requests associated to this interface","sig":null,"attributes":[{"value":"/ Set of requests associated to this interface","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":3148,"byte_end":3196,"line_start":89,"line_end":89,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":3201,"byte_end":3204,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ Requests are messages from the client to the server","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":3209,"byte_end":3264,"line_start":91,"line_end":91,"column_start":5,"column_end":60}}]},{"kind":"Type","id":{"krate":0,"index":314},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":3433,"byte_end":3438,"line_start":96,"line_end":96,"column_start":10,"column_end":15},"name":"Event","qualname":"::Interface::Event","value":"type Event: MessageGroup + 'static;","parent":{"krate":0,"index":312},"children":[],"decl_id":null,"docs":" Set of events associated to this interface","sig":null,"attributes":[{"value":"/ Set of events associated to this interface","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":3311,"byte_end":3357,"line_start":93,"line_end":93,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":3362,"byte_end":3365,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ Events are messages from the server to the client","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":3370,"byte_end":3423,"line_start":95,"line_end":95,"column_start":5,"column_end":58}}]},{"kind":"Const","id":{"krate":0,"index":315},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":3505,"byte_end":3509,"line_start":98,"line_end":98,"column_start":11,"column_end":15},"name":"NAME","qualname":"::Interface::NAME","value":"&'static str","parent":{"krate":0,"index":312},"children":[],"decl_id":null,"docs":" Name of this interface\n","sig":null,"attributes":[{"value":"/ Name of this interface","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":3468,"byte_end":3494,"line_start":97,"line_end":97,"column_start":5,"column_end":31}}]},{"kind":"Const","id":{"krate":0,"index":316},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":4042,"byte_end":4049,"line_start":108,"line_end":108,"column_start":11,"column_end":18},"name":"VERSION","qualname":"::Interface::VERSION","value":"u32","parent":{"krate":0,"index":312},"children":[],"decl_id":null,"docs":" Maximum supported version of this interface","sig":null,"attributes":[{"value":"/ Maximum supported version of this interface","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":3529,"byte_end":3576,"line_start":99,"line_end":99,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":3581,"byte_end":3584,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ This is the maximum version supported by the protocol specification currently","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":3589,"byte_end":3670,"line_start":101,"line_end":101,"column_start":5,"column_end":86}},{"value":"/ used by this library, and should not be used as-is in your code, as a version","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":3675,"byte_end":3756,"line_start":102,"line_end":102,"column_start":5,"column_end":86}},{"value":"/ change can subtly change the behavior of some objects.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":3761,"byte_end":3819,"line_start":103,"line_end":103,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":3824,"byte_end":3827,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ Server are supposed to be able to handle all versions from 1 to the one they","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":3832,"byte_end":3912,"line_start":105,"line_end":105,"column_start":5,"column_end":85}},{"value":"/ advertise through the registry, and clients can choose any version among the","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":3917,"byte_end":3997,"line_start":106,"line_end":106,"column_start":5,"column_end":85}},{"value":"/ ones the server supports.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":4002,"byte_end":4031,"line_start":107,"line_end":107,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":317},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":4121,"byte_end":4132,"line_start":110,"line_end":110,"column_start":8,"column_end":19},"name":"c_interface","qualname":"::Interface::c_interface","value":"fn () -> *const syscom::wl_interface","parent":{"krate":0,"index":312},"children":[],"decl_id":null,"docs":" Pointer to the C representation of this interface\n","sig":null,"attributes":[{"value":"/ Pointer to the C representation of this interface","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":4060,"byte_end":4113,"line_start":109,"line_end":109,"column_start":5,"column_end":58}}]},{"kind":"Enum","id":{"krate":0,"index":318},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":4242,"byte_end":4251,"line_start":114,"line_end":114,"column_start":10,"column_end":19},"name":"NoMessage","qualname":"::NoMessage","value":"NoMessage::{}","parent":null,"children":[],"decl_id":null,"docs":" An empty enum representing a MessageGroup with no messages\n","sig":null,"attributes":[{"value":"/ An empty enum representing a MessageGroup with no messages","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":4170,"byte_end":4232,"line_start":113,"line_end":113,"column_start":1,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":333},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":5395,"byte_end":5406,"line_start":158,"line_end":158,"column_start":12,"column_end":23},"name":"ThreadGuard","qualname":"::ThreadGuard","value":"ThreadGuard {  }","parent":null,"children":[{"krate":0,"index":335},{"krate":0,"index":336}],"decl_id":null,"docs":" Stores a value in a threadafe container that\n only lets you access it from its owning thread","sig":null,"attributes":[{"value":"/ Stores a value in a threadafe container that","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":5182,"byte_end":5230,"line_start":153,"line_end":153,"column_start":1,"column_end":49}},{"value":"/ only lets you access it from its owning thread","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":5231,"byte_end":5281,"line_start":154,"line_end":154,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":5282,"byte_end":5285,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"/ If the ThreadGuard is dropped from the wrong thread,","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":5286,"byte_end":5342,"line_start":156,"line_end":156,"column_start":1,"column_end":57}},{"value":"/ the underlying value will be leaked.","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":5343,"byte_end":5383,"line_start":157,"line_end":157,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":339},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":5571,"byte_end":5574,"line_start":165,"line_end":165,"column_start":12,"column_end":15},"name":"new","qualname":"<ThreadGuard<T>>::new","value":"fn (val: T) -> ThreadGuard<T>","parent":null,"children":[],"decl_id":null,"docs":" Create a new ThreadGuard wrapper\n","sig":null,"attributes":[{"value":"/ Create a new ThreadGuard wrapper","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":5523,"byte_end":5559,"line_start":164,"line_end":164,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":5842,"byte_end":5845,"line_start":174,"line_end":174,"column_start":12,"column_end":15},"name":"get","qualname":"<ThreadGuard<T>>::get","value":"fn (&self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Access the underlying value","sig":null,"attributes":[{"value":"/ Access the underlying value","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":5748,"byte_end":5779,"line_start":171,"line_end":171,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":5784,"byte_end":5787,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ Panics if done on the wrong thread","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":5792,"byte_end":5830,"line_start":173,"line_end":173,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":6073,"byte_end":6080,"line_start":181,"line_end":181,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ThreadGuard<T>>::get_mut","value":"fn (&mut self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Mutably access the underlying value","sig":null,"attributes":[{"value":"/ Mutably access the underlying value","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":5971,"byte_end":6010,"line_start":178,"line_end":178,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":6015,"byte_end":6018,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ Panics if done on the wrong thread","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":6023,"byte_end":6061,"line_start":180,"line_end":180,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":6340,"byte_end":6347,"line_start":189,"line_end":189,"column_start":12,"column_end":19},"name":"try_get","qualname":"<ThreadGuard<T>>::try_get","value":"fn (&self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Try to access the underlying value","sig":null,"attributes":[{"value":"/ Try to access the underlying value","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":6231,"byte_end":6269,"line_start":186,"line_end":186,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":6274,"byte_end":6277,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if done on the wrong thread","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":6282,"byte_end":6328,"line_start":188,"line_end":188,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":345},"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":6629,"byte_end":6640,"line_start":200,"line_end":200,"column_start":12,"column_end":23},"name":"try_get_mut","qualname":"<ThreadGuard<T>>::try_get_mut","value":"fn (&mut self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Try to mutably access the underlying value","sig":null,"attributes":[{"value":"/ Try to mutably access the underlying value","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":6512,"byte_end":6558,"line_start":197,"line_end":197,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":6563,"byte_end":6566,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if done on the wrong thread","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":6571,"byte_end":6617,"line_start":199,"line_end":199,"column_start":5,"column_end":51}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/filter.rs","byte_start":9651,"byte_end":9663,"line_start":19,"line_end":19,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":25},{"krate":0,"index":27},{"krate":0,"index":29}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/filter.rs","byte_start":11375,"byte_end":11381,"line_start":70,"line_end":70,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":42}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/filter.rs","byte_start":11484,"byte_end":11490,"line_start":76,"line_end":76,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":45},{"krate":0,"index":47}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":13886,"byte_end":13892,"line_start":43,"line_end":43,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":61},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":67}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":16062,"byte_end":16071,"line_start":107,"line_end":107,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":82}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":20799,"byte_end":20805,"line_start":26,"line_end":26,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":109},{"krate":0,"index":110}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":22760,"byte_end":22766,"line_start":76,"line_end":76,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":113}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":22866,"byte_end":22872,"line_start":82,"line_end":82,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":115}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":22954,"byte_end":22960,"line_start":88,"line_end":88,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":117}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":23038,"byte_end":23044,"line_start":94,"line_end":94,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":119}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":23429,"byte_end":23443,"line_start":114,"line_end":114,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":33273,"byte_end":33279,"line_start":376,"line_end":376,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":42968,"byte_end":42976,"line_start":24,"line_end":24,"column_start":22,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":43001,"byte_end":43009,"line_start":25,"line_end":25,"column_start":22,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":43019,"byte_end":43027,"line_start":27,"line_end":27,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":180},{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":44807,"byte_end":44815,"line_start":74,"line_end":74,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":187}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":45406,"byte_end":45417,"line_start":94,"line_end":94,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":194},{"krate":0,"index":197}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":47491,"byte_end":47502,"line_start":154,"line_end":154,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":201}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":48163,"byte_end":48173,"line_start":183,"line_end":183,"column_start":13,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":50481,"byte_end":50491,"line_start":264,"line_end":264,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":236}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":50761,"byte_end":50779,"line_start":273,"line_end":273,"column_start":34,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":240},{"krate":0,"index":241}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":51273,"byte_end":51294,"line_start":292,"line_end":292,"column_start":34,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":245},{"krate":0,"index":246}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":54316,"byte_end":54324,"line_start":82,"line_end":82,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":260}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":54921,"byte_end":54929,"line_start":98,"line_end":98,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":262}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":56141,"byte_end":56158,"line_start":133,"line_end":133,"column_start":28,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":56190,"byte_end":56207,"line_start":135,"line_end":135,"column_start":28,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":265}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":57024,"byte_end":57041,"line_start":159,"line_end":159,"column_start":28,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":57073,"byte_end":57090,"line_start":161,"line_end":161,"column_start":28,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":268}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":57647,"byte_end":57654,"line_start":177,"line_end":177,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":270},{"krate":0,"index":277}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":66448,"byte_end":66455,"line_start":397,"line_end":397,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":293}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":66670,"byte_end":66677,"line_start":409,"line_end":409,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":295}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":4309,"byte_end":4318,"line_start":117,"line_end":117,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":320},{"krate":0,"index":321},{"krate":0,"index":322},{"krate":0,"index":323},{"krate":0,"index":324},{"krate":0,"index":325},{"krate":0,"index":327},{"krate":0,"index":328},{"krate":0,"index":329},{"krate":0,"index":330}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":5502,"byte_end":5513,"line_start":163,"line_end":163,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":339}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":5727,"byte_end":5738,"line_start":170,"line_end":170,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":345}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":6840,"byte_end":6851,"line_start":209,"line_end":209,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":348}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":7200,"byte_end":7211,"line_start":219,"line_end":219,"column_start":33,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":7250,"byte_end":7261,"line_start":220,"line_end":220,"column_start":33,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":869,"byte_end":874,"line_start":24,"line_end":24,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":6}},{"kind":"Mod","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":884,"byte_end":890,"line_start":25,"line_end":25,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":15}},{"kind":"Mod","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":900,"byte_end":903,"line_start":26,"line_end":26,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":48}},{"kind":"Mod","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":913,"byte_end":919,"line_start":27,"line_end":27,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":88}},{"kind":"Mod","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":929,"byte_end":938,"line_start":28,"line_end":28,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":154}},{"kind":"Mod","span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":948,"byte_end":952,"line_start":29,"line_end":29,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":247}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/filter.rs","byte_start":9651,"byte_end":9663,"line_start":19,"line_end":19,"column_start":10,"column_end":22},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":20},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/filter.rs","byte_start":11375,"byte_end":11381,"line_start":70,"line_end":70,"column_start":19,"column_end":25},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":37},"to":{"krate":2,"index":1604}},{"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/filter.rs","byte_start":11484,"byte_end":11490,"line_start":76,"line_end":76,"column_start":9,"column_end":15},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":37},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":12691,"byte_end":12696,"line_start":11,"line_end":11,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":1604},"to":{"krate":0,"index":55}},{"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":13886,"byte_end":13892,"line_start":43,"line_end":43,"column_start":28,"column_end":34},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":353},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/map.rs","byte_start":16062,"byte_end":16071,"line_start":107,"line_end":107,"column_start":28,"column_end":37},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":365},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":20799,"byte_end":20805,"line_start":26,"line_end":26,"column_start":6,"column_end":12},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":106},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":22760,"byte_end":22766,"line_start":76,"line_end":76,"column_start":20,"column_end":26},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":106},"to":{"krate":1,"index":8289}},{"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":22866,"byte_end":22872,"line_start":82,"line_end":82,"column_start":18,"column_end":24},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":106},"to":{"krate":1,"index":8287}},{"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":22954,"byte_end":22960,"line_start":88,"line_end":88,"column_start":20,"column_end":26},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":106},"to":{"krate":1,"index":8291}},{"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":23038,"byte_end":23044,"line_start":94,"line_end":94,"column_start":15,"column_end":21},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":106},"to":{"krate":2,"index":2098}},{"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":23429,"byte_end":23443,"line_start":114,"line_end":114,"column_start":6,"column_end":20},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":120},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/socket.rs","byte_start":33273,"byte_end":33279,"line_start":376,"line_end":376,"column_start":25,"column_end":31},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":139},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":42968,"byte_end":42976,"line_start":24,"line_end":24,"column_start":22,"column_end":30},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":162},"to":{"krate":2,"index":1903}},{"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":43001,"byte_end":43009,"line_start":25,"line_end":25,"column_start":22,"column_end":30},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":162},"to":{"krate":2,"index":1915}},{"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":43019,"byte_end":43027,"line_start":27,"line_end":27,"column_start":6,"column_end":14},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":162},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":44807,"byte_end":44815,"line_start":74,"line_end":74,"column_start":15,"column_end":23},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":162},"to":{"krate":2,"index":2098}},{"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":45406,"byte_end":45417,"line_start":94,"line_end":94,"column_start":6,"column_end":17},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":188},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":47491,"byte_end":47502,"line_start":154,"line_end":154,"column_start":18,"column_end":29},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":188},"to":{"krate":2,"index":1893}},{"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":48163,"byte_end":48173,"line_start":183,"line_end":183,"column_start":13,"column_end":23},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":384},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":50481,"byte_end":50491,"line_start":264,"line_end":264,"column_start":22,"column_end":32},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":384},"to":{"krate":2,"index":2098}},{"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":50761,"byte_end":50779,"line_start":273,"line_end":273,"column_start":34,"column_end":52},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":391},"to":{"krate":2,"index":4965}},{"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/user_data.rs","byte_start":51273,"byte_end":51294,"line_start":292,"line_end":292,"column_start":34,"column_end":55},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":400},"to":{"krate":2,"index":4965}},{"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":54316,"byte_end":54324,"line_start":82,"line_end":82,"column_start":6,"column_end":14},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":444},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":54921,"byte_end":54929,"line_start":98,"line_end":98,"column_start":28,"column_end":36},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":444},"to":{"krate":2,"index":6181}},{"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":56141,"byte_end":56158,"line_start":133,"line_end":133,"column_start":28,"column_end":45},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":490},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":56190,"byte_end":56207,"line_start":135,"line_end":135,"column_start":28,"column_end":45},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":490},"to":{"krate":2,"index":6181}},{"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":57024,"byte_end":57041,"line_start":159,"line_end":159,"column_start":28,"column_end":45},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":500},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":57073,"byte_end":57090,"line_start":161,"line_end":161,"column_start":28,"column_end":45},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":500},"to":{"krate":2,"index":6181}},{"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":57647,"byte_end":57654,"line_start":177,"line_end":177,"column_start":6,"column_end":13},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":477},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":66448,"byte_end":66455,"line_start":397,"line_end":397,"column_start":6,"column_end":13},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":288},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/wire.rs","byte_start":66670,"byte_end":66677,"line_start":409,"line_end":409,"column_start":15,"column_end":22},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":288},"to":{"krate":2,"index":2098}},{"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":1293,"byte_end":1298,"line_start":40,"line_end":40,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":1908},"to":{"krate":0,"index":298}},{"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":4309,"byte_end":4318,"line_start":117,"line_end":117,"column_start":23,"column_end":32},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":318},"to":{"krate":0,"index":298}},{"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":5502,"byte_end":5513,"line_start":163,"line_end":163,"column_start":9,"column_end":20},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":333},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":5727,"byte_end":5738,"line_start":170,"line_end":170,"column_start":17,"column_end":28},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":333},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":6840,"byte_end":6851,"line_start":209,"line_end":209,"column_start":26,"column_end":37},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":333},"to":{"krate":2,"index":2098}},{"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":7200,"byte_end":7211,"line_start":219,"line_end":219,"column_start":33,"column_end":44},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":333},"to":{"krate":2,"index":1903}},{"span":{"file_name":"/home/grahamk/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.27.0/src/lib.rs","byte_start":7250,"byte_end":7261,"line_start":220,"line_end":220,"column_start":33,"column_end":44},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":333},"to":{"krate":2,"index":1915}}]}