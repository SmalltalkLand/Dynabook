

----STARTUP---- (20 July 2020 16:26:42) as F:\Dbs\squeak\build-0.066.image!

!AltGarbageCollector class methodsFor: 'as yet unclassified' stamp: 'GDK 7/20/2020 14:27:14' prior: 50805530!
isNonGCAble: obj
| v |
v _ false.
obj triggerEvent: #isNonGCAble with: [v _ true].
Smalltalk allObjects do: [:o|(self object: o includesRecursive: obj) ifTrue: [o triggerEvent: #boundary withArguments: {obj.[:v2|v _ v2]}]].
^v! !
!IIFile class methodsFor: 'as yet unclassified' stamp: 'GDK 7/20/2020 14:34:13'!
internalizeSources: rootDrive
Smalltalk internalizeSources.! !
!IIFile class methodsFor: 'as yet unclassified' stamp: 'GDK 7/20/2020 14:37:03' prior: 50805662!
internalizeSources: rootDrive
Smalltalk internalizeSources.
SourceFiles with: {'Sources.changes'. 'Changes.changes'} do: [:f :n|rootDrive at: n asSymbol put: (self new object: f;yourself)].! !
!IIFile class methodsFor: 'as yet unclassified' stamp: 'GDK 7/20/2020 14:42:21' prior: 50805667!
internalizeSources: rootDrive
Smalltalk internalizeSources.
SourceFiles with: {'Sources.changes'. 'Changes.changes'} do: [:f :n|rootDrive at: n asSymbol put: (self new object: f;yourself)].! !
!AltGarbageCollector class methodsFor: 'as yet unclassified' stamp: 'GDK 7/20/2020 15:27:58' prior: 50805445!
mark
^(Smalltalk allObjects collect: [:o|o -> ((((Smalltalk allObjects reject: [:o2|o2 == objects]) anySatisfy: [:o2|((1 to: o2 basicSize) anySatisfy: [:f|(o2 basicAt: f) == o]) or: [(1 to: o2 class instVarNames size)  anySatisfy: [:f|(o2 instVarAt: f) == 0]] or: [o2 class == o]]) or: [self isNonGCAble: o]) and: [(self isDrum: o) not])]) asDictionary
! !
!AltGarbageCollector class methodsFor: 'as yet unclassified' stamp: 'GDK 7/20/2020 15:46:14' prior: 50805687!
mark
^(Smalltalk allObjects collect: [:o|o -> ((((Smalltalk allObjects reject: [:o2|o2 == objects]) anySatisfy: [:o2|((1 to: o2 basicSize) anySatisfy: [:f|(o2 basicAt: f) == o]) or: [(1 to: o2 class instVarNames size)  anySatisfy: [:f|(o2 instVarAt: f) == 0]] or: [o2 class == o]]) or: [self isNonGCAble: o]) and: [(self isDrum: o) not])]) asDictionary! !
!AltGarbageCollector class methodsFor: 'as yet unclassified' stamp: 'GDK 7/20/2020 16:01:30' prior: 50805702!
mark
^(Smalltalk allObjects collect: [:o|o -> ((((Smalltalk allObjects reject: [:o2|o2 == objects]) anySatisfy: [:o2|((1 to: o2 basicSize) anySatisfy: [:f|(o2 basicAt: f) == o]) or: [(1 to: o2 class instVarNames size)  anySatisfy: [:f|(o2 instVarAt: f) == 0]] or: [o2 class == o]]) or: [self isNonGCAble: o]) and: [(self isDrum: o) not])]) asDictionary! !

!classDefinition: #ObjectFileOut category: #FileOutObject stamp: 'GDK 7/20/2020 16:26:45'!
Object subclass: #ObjectFileOut
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'FileOutObject'!

!classDefinition: #ObjectFileOut category: #FileOutObject stamp: 'GDK 7/20/2020 16:26:46'!
Object subclass: #ObjectFileOut
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'FileOutObject'!
!ObjectFileOut class methodsFor: 'no messages' stamp: 'GDK 7/20/2020 16:25:05'!
fileOut: object onto: stream! !
!ObjectFileOut class methodsFor: 'as yet unclassified' stamp: 'GDK 7/20/2020 16:25:09' prior: 50805745!
fileOut: object onto: stream
! !
!ObjectFileOut class methodsFor: 'as yet unclassified' stamp: 'GDK 7/20/2020 16:25:23' prior: 50805750!
fileOut: object onto: stream
stream nextPutAll: '[object#'.! !
!ObjectFileOut class methodsFor: 'as yet unclassified' stamp: 'GDK 7/20/2020 16:27:01' prior: 50805755!
fileOut: object onto: stream
stream nextPutAll: '[object#'.
	! !
!ObjectFileOut class methodsFor: 'as yet unclassified' stamp: 'GDK 7/20/2020 16:28:05'!
fileOut: object onto: stream idDictionary: dict
stream nextPutAll: '[object#'.
	stream nextPutAll: (dict at: object ifAbsentPut: [(1 to: 10000000000) atRandom]).! !
!ObjectFileOut class methodsFor: 'as yet unclassified' stamp: 'GDK 7/20/2020 16:28:23' prior: 50805766!
fileOut: object onto: stream idDictionary: dict
stream nextPutAll: '[object#'.
	stream nextPutAll: (dict at: object ifAbsentPut: [(1 to: 10000000000) atRandom]).
	! !
!ObjectFileOut class methodsFor: 'as yet unclassified' stamp: 'GDK 7/20/2020 16:29:16' prior: 50805775!
fileOut: object onto: stream idDictionary: dict
| staging |
staging _ OrderedCollection new.
stream nextPutAll: '[object#'.
	stream nextPutAll: (dict at: object ifAbsentPut: [(1 to: 10000000000) atRandom]).
	! !
!ObjectFileOut class methodsFor: 'as yet unclassified' stamp: 'GDK 7/20/2020 16:29:21' prior: 50805784!
fileOut: object onto: stream idDictionary: dict
| staging |
staging _ OrderedCollection new.
stream nextPutAll: '[object#'.
	stream nextPutAll: (dict at: object ifAbsentPut: [(1 to: 10000000000) atRandom]).
	
	! !
!ObjectFileOut class methodsFor: 'as yet unclassified' stamp: 'GDK 7/20/2020 16:29:38' prior: 50805794!
fileOut: object onto: stream idDictionary: dict
| staging |
staging _ OrderedCollection new.
stream nextPutAll: '[object#'.
	stream nextPutAll: (dict at: object ifAbsentPut: [(1 to: 10000000000) atRandom]).
	staging add: (object class).
	! !
!ObjectFileOut class methodsFor: 'as yet unclassified' stamp: 'GDK 7/20/2020 16:31:25' prior: 50805804!
fileOut: object onto: stream idDictionary: dict
| staging |
staging _ OrderedCollection new.
stream nextPutAll: '[object#'.
	stream nextPutAll: (dict at: object ifAbsentPut: [(1 to: 10000000000) atRandom]).
	staging add: (object class).
	stream nextPutAll:  (dict at: object class ifAbsentPut: [(1 to: 10000000000) atRandom]).
	stream nextPut: $:.
	object class instVarNames doWithIndex: [:v :i|staging add: (object instVarAt: i). ].! !
!ObjectFileOut class methodsFor: 'as yet unclassified' stamp: 'GDK 7/20/2020 16:33:38' prior: 50805815!
fileOut: object onto: stream idDictionary: dict
| staging |
staging _ OrderedCollection new.
stream nextPutAll: '[object#'.
	stream nextPutAll: (dict at: object ifAbsentPut: [(1 to: 10000000000) atRandom asString]).
	staging add: (object class).
	stream nextPutAll:  (dict at: object class ifAbsentPut: [(1 to: 10000000000) atRandom asString]).
	stream nextPut: $:.
	object class instVarNames doWithIndex: [:v :i|staging add: (object instVarAt: i).  stream nextPutAll: (dict at: (object instVarAt: i) ifAbsentPut: [(1 to: 10000000000) atRandom asString])].
	stream nextPut: $:.
	1 to: object basicSize do: [:v|staging add: (object basicAt: v). stream nextPutAll: (dict at: (object basicAt: v) ifAbsentPut: [(1 to: 10000000000) atRandom asString])].
	stream nextPut: $].! !
!ObjectFileOut class methodsFor: 'as yet unclassified' stamp: 'GDK 7/20/2020 16:34:59' prior: 50805832!
fileOut: object onto: stream idDictionary: dict
| staging |
dict at: object ifPresent: [^self].
staging _ OrderedCollection new.
stream nextPutAll: '[object#'.
	stream nextPutAll: (dict at: object ifAbsentPut: [(1 to: 10000000000) atRandom asString]).
	staging add: (object class).
	stream nextPutAll:  (dict at: object class ifAbsentPut: [(1 to: 10000000000) atRandom asString]).
	stream nextPut: $:.
	object class instVarNames doWithIndex: [:v :i|staging add: (object instVarAt: i).  stream nextPutAll: (dict at: (object instVarAt: i) ifAbsentPut: [(1 to: 10000000000) atRandom asString])].
	stream nextPut: $:.
	1 to: object basicSize do: [:v|staging add: (object basicAt: v). stream nextPutAll: (dict at: (object basicAt: v) ifAbsentPut: [(1 to: 10000000000) atRandom asString])].
	stream nextPut: $].
staging do: [:s|self fileOut: s onto: stream idDictionary: dict].! !
!ObjectFileOut class methodsFor: 'as yet unclassified' stamp: 'GDK 7/20/2020 16:35:40'!
fileOut: object onto: stream idDictionary: dict track: track
| staging |
(track includes: object) ifTrue: [^self].
staging _ OrderedCollection new.
stream nextPutAll: '[object#'.
	stream nextPutAll: (dict at: object ifAbsentPut: [(1 to: 10000000000) atRandom asString]).
	staging add: (object class).
	stream nextPutAll:  (dict at: object class ifAbsentPut: [(1 to: 10000000000) atRandom asString]).
	stream nextPut: $:.
	object class instVarNames doWithIndex: [:v :i|staging add: (object instVarAt: i).  stream nextPutAll: (dict at: (object instVarAt: i) ifAbsentPut: [(1 to: 10000000000) atRandom asString])].
	stream nextPut: $:.
	1 to: object basicSize do: [:v|staging add: (object basicAt: v). stream nextPutAll: (dict at: (object basicAt: v) ifAbsentPut: [(1 to: 10000000000) atRandom asString])].
	stream nextPut: $].
track add: object.
staging do: [:s|self fileOut: s onto: stream idDictionary: dict].! !

!methodRemoval: ObjectFileOut class #fileOut:onto:idDictionary: stamp: 'GDK 7/20/2020 16:35:47'!
fileOut: object onto: stream idDictionary: dict
| staging |
dict at: object ifPresent: [^self].
staging _ OrderedCollection new.
stream nextPutAll: '[object#'.
	stream nextPutAll: (dict at: object ifAbsentPut: [(1 to: 10000000000) atRandom asString]).
	staging add: (object class).
	stream nextPutAll:  (dict at: object class ifAbsentPut: [(1 to: 10000000000) atRandom asString]).
	stream nextPut: $:.
	object class instVarNames doWithIndex: [:v :i|staging add: (object instVarAt: i).  stream nextPutAll: (dict at: (object instVarAt: i) ifAbsentPut: [(1 to: 10000000000) atRandom asString])].
	stream nextPut: $:.
	1 to: object basicSize do: [:v|staging add: (object basicAt: v). stream nextPutAll: (dict at: (object basicAt: v) ifAbsentPut: [(1 to: 10000000000) atRandom asString])].
	stream nextPut: $].
staging do: [:s|self fileOut: s onto: stream idDictionary: dict].!
!ObjectFileOut class methodsFor: 'as yet unclassified' stamp: 'GDK 7/20/2020 16:36:14' prior: 50805761!
fileOut: object onto: stream
self fileOut: object onto: stream idDictionary: Dictionary new track: Set new.! !
!ObjectFileOut class methodsFor: 'as yet unclassified' stamp: 'GDK 7/20/2020 16:36:27' prior: 50805891!
fileOut: object onto: stream idDictionary: dict track: track
| staging |
(track includes: object) ifTrue: [^self].
staging _ OrderedCollection new.
stream nextPutAll: '[object#'.
	stream nextPutAll: (dict at: object ifAbsentPut: [(1 to: 10000000000) atRandom asString]).
	staging add: (object class).
	stream nextPutAll:  (dict at: object class ifAbsentPut: [(1 to: 10000000000) atRandom asString]).
	stream nextPut: $:.
	object class instVarNames doWithIndex: [:v :i|staging add: (object instVarAt: i).  stream nextPutAll: (dict at: (object instVarAt: i) ifAbsentPut: [(1 to: 10000000000) atRandom asString])].
	stream nextPut: $:.
	1 to: object basicSize do: [:v|staging add: (object basicAt: v). stream nextPutAll: (dict at: (object basicAt: v) ifAbsentPut: [(1 to: 10000000000) atRandom asString])].
	stream nextPut: $].
track add: object.
staging do: [:s|self fileOut: s onto: stream idDictionary: dict track: track].! !