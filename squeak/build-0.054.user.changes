

----SNAPSHOT----(18 July 2020 13:32:51) build-0.054.image priorSource: 14711476!

----SNAPSHOT----(18 July 2020 13:36:00) build-0.054.image priorSource: 14711476!

Utilities startUp!

----SNAPSHOT----(18 July 2020 13:36:50) build-0.054.image priorSource: 14720348!
!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'GDK 7/18/2020 13:40:01' prior: 50791526!
snapshot: save andQuit: quit embedded: embeddedFlag clearAllClassState: clearAllStateFlag
	"WARNING: Current process will be killed.
UI Process will be restarted
"
	"Mark the changes file and close all files as part of #processShutdownList.
	If save is true, save the current state of this Smalltalk in the image file.
	If quit is true, then exit to the outer OS shell.
	The latter part of this method runs when resuming a previously saved image. This resume logic checks for a document file to process when starting up."
	"
	To test the full cleanup and startup procedures, evaluate:
		Smalltalk snapshot: false andQuit: false embedded: false clearAllClassState: true

	To test the cleanup done when saving the image, evaluate:
		Smalltalk snapshot: false andQuit: false embedded: false clearAllClassState: false
	"
	| activeProc |
	activeProc _ Processor activeProcess.
	Utilities shutDown.
	[
	[ | isARealStartup guiRootObject guiRootObjectClass |
	save not & quit
		ifTrue: [
			(SourceFiles at: 2) ifNotNil: [ :changes |
				ChangesInitialFileSize ifNotNil: [ changes truncate: ChangesInitialFileSize ]]]
		ifFalse: [
			self
				logSnapshot: save
				andQuit: quit ].
	clearAllStateFlag ifTrue: [
		TranscriptWindow allInstancesDo: [ :each |
			each isInWorld ifTrue: [
				each delete.]].
		UISupervisor ui tearDownDesktop.
		Transcript logToFile: false ].
	ActiveModel flushEventSystem.
	self processShutDownList: quit.
	"Lo que sigue aca podria ir al shutdown de alguien... (se levantan en startup!!)"
	Smalltalk stopLowSpaceWatcher.
	WeakArray stopFinalizationProcess.
	ProcessorScheduler stopBackgroundProcess.
	"Cosas que levanto explicitamente abajo"
	guiRootObjectClass _ UISupervisor ui class.
	guiRootObject _ UISupervisor ui.
	"Replace with this to create a new world at startup after 'saveAsNewVersion'"
	"guiRootObject _ clearAllStateFlag ifFalse: [ UISupervisor ui ]."
	UISupervisor stopUIProcess.
	activeProc isTerminated ifFalse: [ activeProc terminate ].
	"Clean Globals"
	Smalltalk
		at: #Sensor
		put: nil.
	Smalltalk
		at: #Display
		put: nil.
	Smalltalk closeSourceFiles.
	Smalltalk
		at: #SourceFiles
		put: nil.
	Smalltalk allClassesDo: [ :cls |
		cls releaseClassCachedState ].
	clearAllStateFlag ifTrue: [
		Smalltalk allClassesDo: [ :cls |
			cls releaseClassState ]].
	"Ojo con los pool dicts. Creo que no hay ninguno..."
	"To keep cleaning stuff that shouldn't be saved..."
	clearAllStateFlag ifTrue: [
		Smalltalk printStuffToCleanOnImageSave.
		"Remove this call to actually see the image clean report."
		Transcript clear.
		].
	"Do image save & quit as apropriate"
	(Cursor cursorAt: #writeCursor) activateCursor.
	save
		ifTrue: [
			"The snapshot primitive answers false if it was just called to do the snapshot.
			But image startup is resumed by returning (again) from the primitive, but this time answering true."
			isARealStartup _ embeddedFlag
				ifTrue: [ self snapshotEmbeddedPrimitive ]
				ifFalse: [ self snapshotPrimitive ]]
		ifFalse: [ isARealStartup _ false ].
	quit & (isARealStartup == false) ifTrue: [ self quitPrimitive ].
	"If starting from absolute scratch, this would be a good time to recreate Global names"
	Smalltalk
		at: #Sensor
		put: nil.
	Smalltalk
		at: #Display
		put: DisplayScreen new.
	Smalltalk
		at: #SourceFiles
		put: (Array new: 2).
	Smalltalk openSourceFiles.
	"Here, startup begins!! (isARealStartup might be nil)"
	Smalltalk allClassesDo: [ :cls |
		cls initClassCachedState ].
	self doStartUp: isARealStartup == true.
	UISupervisor spawnNewMorphicProcessFor: (guiRootObject ifNil: [ guiRootObject _ guiRootObjectClass newWorld ]).
	Display triggerEvent: #screenSizeChanged.
	self restoreLostChangesIfNecessary.
	clearAllStateFlag ifTrue: [
		UISupervisor whenUIinSafeState: [
			guiRootObject recreateDefaultDesktop ]].
	"If system is coming up (VM and image just started)"
	isARealStartup == true ifTrue: [
		UISupervisor whenUIinSafeState: [
			self processCommandLineArguments.
			AppLauncher launchApp ]].
	"Now it's time to raise an error"
	isARealStartup ifNil: [ self error: 'Failed to write image file (disk full?)' ]]
		forkAt: Processor timingPriority - 1
		named: 'Startup process'.
		] on: Error do: [:ex|Smalltalk openSourceFiles].! !
!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'GDK 7/18/2020 13:40:08' prior: 50791668!
snapshot: save andQuit: quit embedded: embeddedFlag clearAllClassState: clearAllStateFlag
	"WARNING: Current process will be killed.
UI Process will be restarted
"
	"Mark the changes file and close all files as part of #processShutdownList.
	If save is true, save the current state of this Smalltalk in the image file.
	If quit is true, then exit to the outer OS shell.
	The latter part of this method runs when resuming a previously saved image. This resume logic checks for a document file to process when starting up."
	"
	To test the full cleanup and startup procedures, evaluate:
		Smalltalk snapshot: false andQuit: false embedded: false clearAllClassState: true

	To test the cleanup done when saving the image, evaluate:
		Smalltalk snapshot: false andQuit: false embedded: false clearAllClassState: false
	"
	| activeProc |
	activeProc _ Processor activeProcess.
	[
	[ | isARealStartup guiRootObject guiRootObjectClass |
	save not & quit
		ifTrue: [
			(SourceFiles at: 2) ifNotNil: [ :changes |
				ChangesInitialFileSize ifNotNil: [ changes truncate: ChangesInitialFileSize ]]]
		ifFalse: [
			self
				logSnapshot: save
				andQuit: quit ].
	clearAllStateFlag ifTrue: [
		TranscriptWindow allInstancesDo: [ :each |
			each isInWorld ifTrue: [
				each delete.]].
		UISupervisor ui tearDownDesktop.
		Transcript logToFile: false ].
	ActiveModel flushEventSystem.
	self processShutDownList: quit.
	"Lo que sigue aca podria ir al shutdown de alguien... (se levantan en startup!!)"
	Smalltalk stopLowSpaceWatcher.
	WeakArray stopFinalizationProcess.
	ProcessorScheduler stopBackgroundProcess.
	"Cosas que levanto explicitamente abajo"
	guiRootObjectClass _ UISupervisor ui class.
	guiRootObject _ UISupervisor ui.
	"Replace with this to create a new world at startup after 'saveAsNewVersion'"
	"guiRootObject _ clearAllStateFlag ifFalse: [ UISupervisor ui ]."
	UISupervisor stopUIProcess.
	activeProc isTerminated ifFalse: [ activeProc terminate ].
	"Clean Globals"
	Smalltalk
		at: #Sensor
		put: nil.
	Smalltalk
		at: #Display
		put: nil.
	Smalltalk closeSourceFiles.
	Smalltalk
		at: #SourceFiles
		put: nil.
	Smalltalk allClassesDo: [ :cls |
		cls releaseClassCachedState ].
	clearAllStateFlag ifTrue: [
		Smalltalk allClassesDo: [ :cls |
			cls releaseClassState ]].
	"Ojo con los pool dicts. Creo que no hay ninguno..."
	"To keep cleaning stuff that shouldn't be saved..."
	clearAllStateFlag ifTrue: [
		Smalltalk printStuffToCleanOnImageSave.
		"Remove this call to actually see the image clean report."
		Transcript clear.
		].
	"Do image save & quit as apropriate"
	(Cursor cursorAt: #writeCursor) activateCursor.
	save
		ifTrue: [
			"The snapshot primitive answers false if it was just called to do the snapshot.
			But image startup is resumed by returning (again) from the primitive, but this time answering true."
			isARealStartup _ embeddedFlag
				ifTrue: [ self snapshotEmbeddedPrimitive ]
				ifFalse: [ self snapshotPrimitive ]]
		ifFalse: [ isARealStartup _ false ].
	quit & (isARealStartup == false) ifTrue: [ self quitPrimitive ].
	"If starting from absolute scratch, this would be a good time to recreate Global names"
	Smalltalk
		at: #Sensor
		put: nil.
	Smalltalk
		at: #Display
		put: DisplayScreen new.
	Smalltalk
		at: #SourceFiles
		put: (Array new: 2).
	Smalltalk openSourceFiles.
	"Here, startup begins!! (isARealStartup might be nil)"
	Smalltalk allClassesDo: [ :cls |
		cls initClassCachedState ].
	self doStartUp: isARealStartup == true.
	UISupervisor spawnNewMorphicProcessFor: (guiRootObject ifNil: [ guiRootObject _ guiRootObjectClass newWorld ]).
	Display triggerEvent: #screenSizeChanged.
	self restoreLostChangesIfNecessary.
	clearAllStateFlag ifTrue: [
		UISupervisor whenUIinSafeState: [
			guiRootObject recreateDefaultDesktop ]].
	"If system is coming up (VM and image just started)"
	isARealStartup == true ifTrue: [
		UISupervisor whenUIinSafeState: [
			self processCommandLineArguments.
			AppLauncher launchApp ]].
	"Now it's time to raise an error"
	isARealStartup ifNil: [ self error: 'Failed to write image file (disk full?)' ]]
		forkAt: Processor timingPriority - 1
		named: 'Startup process'.
		] on: Error do: [:ex|Smalltalk openSourceFiles].! !
!Utilities class methodsFor: 'default desktop' stamp: 'GDK 7/18/2020 13:40:42'!
showLicense
self inform: self license.! !

!methodRemoval: Utilities class #startUp stamp: 'GDK 7/18/2020 13:40:47'!
startUp
super startUp.
self inform: self license.!

MDInstVarChunk!

SystemDictionary!
!MDNotificationAdaptor methodsFor: 'callbacks' stamp: 'GDK 7/18/2020 13:47:22'!
noteMethodChanged:  meth sel: selector category: category class: class requestor: requestor
	| element |
		element := MDMethodElement				className: class theNonMetaClass name				selector: (selector)				classIsMeta: class isMeta.	self noteElementChanged: element ! !
!MDNotificationAdaptor methodsFor: 'callbacks' stamp: 'GDK 7/18/2020 13:47:56'!
noteMethodChanged:  meth sel: selector category: category class: class
^self noteMethodChanged:  meth sel: selector category: category class: class requestor: nil! !
!MDNotificationAdaptor methodsFor: 'registration' stamp: 'GDK 7/18/2020 13:49:47' prior: 50780134!
register	"SystemChangeNotifier uniqueInstance 		notify: self 		ofSystemChangesOfItem: #class 		change: #Commented 		using: #noteClassCommented:;				notify: self 		ofSystemChangesOfItem: #class 		change: #Modified 		using: #noteClassModified:;				notify: self		ofSystemChangesOfItem: #class		change: #Added		using: #noteClassChanged:;				notify: self		ofSystemChangesOfItem: #method		using: #noteMethodChanged:."
		SystemChangeNotifier uniqueInstance when: #methodAddedInProtocol send: # to: self.! !
!MDNotificationAdaptor methodsFor: 'registration' stamp: 'GDK 7/18/2020 13:50:44' prior: 50791968!
register	"SystemChangeNotifier uniqueInstance 		notify: self 		ofSystemChangesOfItem: #class 		change: #Commented 		using: #noteClassCommented:;				notify: self 		ofSystemChangesOfItem: #class 		change: #Modified 		using: #noteClassModified:;				notify: self		ofSystemChangesOfItem: #class		change: #Added		using: #noteClassChanged:;				notify: self		ofSystemChangesOfItem: #method		using: #noteMethodChanged:."
		SystemChangeNotifier uniqueInstance when: #methodAddedInProtocol send: #noteMethodChanged:sel:category:class:requestor: to: self.! !
!MDNotificationAdaptor methodsFor: 'registration' stamp: 'GDK 7/18/2020 13:51:14' prior: 50791988!
register	"SystemChangeNotifier uniqueInstance 		notify: self 		ofSystemChangesOfItem: #class 		change: #Commented 		using: #noteClassCommented:;				notify: self 		ofSystemChangesOfItem: #class 		change: #Modified 		using: #noteClassModified:;				notify: self		ofSystemChangesOfItem: #class		change: #Added		using: #noteClassChanged:;				notify: self		ofSystemChangesOfItem: #method		using: #noteMethodChanged:."
		SystemChangeNotifier uniqueInstance when: #methodAddedInProtocol send: #noteMethodChanged:sel:category:class:requestor: to: self; when: #methodChanged send: #noteMethodChanged:sel:category:class:requestor: to: self.! !
!MDNotificationAdaptor methodsFor: 'registration' stamp: 'GDK 7/18/2020 13:51:52' prior: 50792009!
register	"SystemChangeNotifier uniqueInstance 		notify: self 		ofSystemChangesOfItem: #class 		change: #Commented 		using: #noteClassCommented:;				notify: self 		ofSystemChangesOfItem: #class 		change: #Modified 		using: #noteClassModified:;				notify: self		ofSystemChangesOfItem: #class		change: #Added		using: #noteClassChanged:;				notify: self		ofSystemChangesOfItem: #method		using: #noteMethodChanged:."
		SystemChangeNotifier uniqueInstance when: #methodAddedInProtocol send: #noteMethodChanged:sel:category:class:requestor: to: self; when: #methodChanged send: #noteMethodChanged:sel:category:class:requestor: to: self; when: #methodRemoved send: #noteMethodChanged:sel:category:class: to: self.! !
!MDNotificationAdaptor methodsFor: 'private' stamp: 'GDK 7/18/2020 13:55:05'!
processClassVars: oldClass newClass: newClass	| changed element |	changed := self xor: oldClass classVarNames with: newClass classVarNames.	changed do:		[:name |		element := MDClassVarElement className: oldClass name name: name.		self noteElementChanged: element]! !
!MDNotificationAdaptor methodsFor: 'private' stamp: 'GDK 7/18/2020 13:55:59'!
processInstVars: oldClass newClass: newClass	| changed element class |	changed := self xor: oldClass instVarNames with:  newClass instVarNames.	changed do:		[:name |		class := oldClass isMeta ifTrue: [MDClassInstVarElement] ifFalse: [MDInstVarElement].		element := class className: oldClass name name: name.		self noteElementChanged: element]! !
!MDNotificationAdaptor methodsFor: 'private' stamp: 'GDK 7/18/2020 13:56:37' prior: 50763053!
processPools: anEvent	| changed element name |
	"	changed := self xor: anEvent sharedPools with: anEvent oldSharedPools.	changed do:		[:pool |		name := Smalltalk keyAtValue: pool.		element := MDPoolImportElement className: anEvent item name name: name.		self noteElementChanged: element]
	"! !
!MDNotificationAdaptor methodsFor: 'callbacks' stamp: 'GDK 7/18/2020 13:58:36'!
noteClassModified: oldClass newClass: newClass
| anEvent |
anEvent _ oldClass.	"anEvent item isMeta ifFalse: [self processClass: anEvent].	anEvent areInstVarsModified ifTrue: ["self processInstVars: anEvent newClass: newClass."].	anEvent areClassVarsModified ifTrue: ["self processClassVars: anEvent newClass: newClass."].	anEvent areSharedPoolsModified ifTrue: [self processPools: anEvent newClass: newClass.]."! !
!MDNotificationAdaptor methodsFor: 'registration' stamp: 'GDK 7/18/2020 13:59:37' prior: 50792033!
register	"SystemChangeNotifier uniqueInstance 		notify: self 		ofSystemChangesOfItem: #class 		change: #Commented 		using: #noteClassCommented:;				notify: self 		ofSystemChangesOfItem: #class 		change: #Modified 		using: #noteClassModified:;				notify: self		ofSystemChangesOfItem: #class		change: #Added		using: #noteClassChanged:;				notify: self		ofSystemChangesOfItem: #method		using: #noteMethodChanged:."
		SystemChangeNotifier uniqueInstance when: #methodAddedInProtocol send: #noteMethodChanged:sel:category:class:requestor: to: self; when: #methodChanged send: #noteMethodChanged:sel:category:class:requestor: to: self; when: #methodRemoved send: #noteMethodChanged:sel:category:class: to: self; when: #classAdded.! !
!MDNotificationAdaptor methodsFor: 'callbacks' stamp: 'GDK 7/18/2020 14:00:00'!
noteClassChanged: aClass category: c	| element |	element := MDClassElement className: aClass name.	self noteElementChanged: element! !
!MDNotificationAdaptor methodsFor: 'registration' stamp: 'GDK 7/18/2020 14:01:10' prior: 50792113!
register	"SystemChangeNotifier uniqueInstance 		notify: self 		ofSystemChangesOfItem: #class 		change: #Commented 		using: #noteClassCommented:;				notify: self 		ofSystemChangesOfItem: #class 		change: #Modified 		using: #noteClassModified:;				notify: self		ofSystemChangesOfItem: #class		change: #Added		using: #noteClassChanged:;				notify: self		ofSystemChangesOfItem: #method		using: #noteMethodChanged:."
		SystemChangeNotifier uniqueInstance when: #methodAddedInProtocol send: #noteMethodChanged:sel:category:class:requestor: to: self; when: #methodChanged send: #noteMethodChanged:sel:category:class:requestor: to: self; when: #methodRemoved send: #noteMethodChanged:sel:category:class: to: self; when: #classAdded send: #noteClassChanged:category: to: self;when: #classDefinitionChanged.! !
!MDNotificationAdaptor methodsFor: 'registration' stamp: 'GDK 7/18/2020 14:01:44' prior: 50792147!
register	"SystemChangeNotifier uniqueInstance 		notify: self 		ofSystemChangesOfItem: #class 		change: #Commented 		using: #noteClassCommented:;				notify: self 		ofSystemChangesOfItem: #class 		change: #Modified 		using: #noteClassModified:;				notify: self		ofSystemChangesOfItem: #class		change: #Added		using: #noteClassChanged:;				notify: self		ofSystemChangesOfItem: #method		using: #noteMethodChanged:."
		SystemChangeNotifier uniqueInstance when: #methodAddedInProtocol send: #noteMethodChanged:sel:category:class:requestor: to: self; when: #methodChanged send: #noteMethodChanged:sel:category:class:requestor: to: self; when: #methodRemoved send: #noteMethodChanged:sel:category:class: to: self; when: #classAdded send: #noteClassChanged:category: to: self;when: #classDefinitionChangeds send: #noteClassModified:newClass: to: self.! !